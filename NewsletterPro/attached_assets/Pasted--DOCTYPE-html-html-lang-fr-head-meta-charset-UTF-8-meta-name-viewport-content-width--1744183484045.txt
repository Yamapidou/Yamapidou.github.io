<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Système de Gestion</title>
<script src="https://cdn.tailwindcss.com/3.4.16"></script>
<script>tailwind.config={theme:{extend:{colors:{primary:'#4f46e5',secondary:'#6b7280'},borderRadius:{'none':'0px','sm':'4px',DEFAULT:'8px','md':'12px','lg':'16px','xl':'20px','2xl':'24px','3xl':'32px','full':'9999px','button':'8px'}}}}</script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">
<style>
:where([class^="ri-"])::before { content: "\f3c2"; }
body {
font-family: 'Inter', sans-serif;
background-color: #f9fafb;
}
.timer-display {
font-family: 'Roboto Mono', monospace;
}
.note-area {
min-height: 200px;
}
.custom-checkbox {
appearance: none;
width: 1.25rem;
height: 1.25rem;
border: 2px solid #d1d5db;
border-radius: 4px;
position: relative;
cursor: pointer;
transition: all 0.2s;
}
.custom-checkbox:checked {
background-color: #4f46e5;
border-color: #4f46e5;
}
.custom-checkbox:checked::after {
content: "";
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
width: 0.5rem;
height: 0.5rem;
background-color: white;
border-radius: 1px;
}
.tab-active {
color: #4f46e5;
border-bottom: 2px solid #4f46e5;
}
/* Notification styles */
@keyframes slideIn {
from { transform: translateX(100%); }
to { transform: translateX(0); }
}
@keyframes slideOut {
from { transform: translateX(0); }
to { transform: translateX(100%); }
}
.notification-enter {
animation: slideIn 0.3s forwards;
}
.notification-exit {
animation: slideOut 0.3s forwards;
}
/* Animation pour les modals */
@keyframes fadeIn {
from { opacity: 0; transform: scale(0.95); }
to { opacity: 1; transform: scale(1); }
}
.animate-fade-in {
animation: fadeIn 0.2s ease-out forwards;
}
</style>
</head>
<body>
<!-- Login Modal -->
<div id="loginModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Connexion</h3>
</div>
<div class="p-6">
<div class="space-y-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nom d'utilisateur</label>
<input type="text" id="username" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Mot de passe</label>
<div class="relative">
<input type="password" id="password" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-10">
<button id="togglePassword" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
<i class="ri-eye-off-line"></i>
</button>
</div>
</div>
<div class="flex items-center justify-between">
<div class="flex items-center">
<input type="checkbox" id="remember" class="custom-checkbox" onchange="handleRememberChange(this)">
<label for="remember" class="ml-2 text-sm text-gray-600">Se souvenir de moi</label>
</div>
<a href="#" class="text-sm text-primary hover:underline">Mot de passe oublié ?</a>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<button id="loginBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
Se connecter
</button>
</div>
</div>
</div>
<div class="min-h-screen flex flex-col">
<script>
// Login Modal Functions
document.addEventListener('DOMContentLoaded', function() {
// Show login modal by default
document.getElementById('loginModal').classList.remove('hidden');
document.body.style.overflow = 'hidden';
// Toggle password visibility
const togglePassword = document.getElementById('togglePassword');
const password = document.getElementById('password');
togglePassword.addEventListener('click', function() {
const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
password.setAttribute('type', type);
// Toggle icon
const icon = this.querySelector('i');
if (type === 'password') {
icon.classList.remove('ri-eye-line');
icon.classList.add('ri-eye-off-line');
} else {
icon.classList.remove('ri-eye-off-line');
icon.classList.add('ri-eye-line');
}
});
// Handle login
// Fonction pour gérer le changement d'état de la case à cocher
function handleRememberChange(checkbox) {
if (checkbox.checked) {
const warningDialog = document.createElement('div');
warningDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]';
warningDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6 border-b">
<h3 class="text-lg font-semibold text-amber-600">Avertissement de sécurité</h3>
</div>
<div class="p-6">
<div class="flex items-start gap-3">
<div class="w-5 h-5 flex items-center justify-center text-amber-500">
<i class="ri-alert-line text-xl mt-0.5"></i>
</div>
<div>
<p class="text-gray-600 mb-3">En activant cette option, vos identifiants de connexion seront enregistrés sur cet appareil.</p>
<p class="text-gray-600 mb-3">Cette fonctionnalité n'est pas recommandée sur un ordinateur partagé ou public pour des raisons de sécurité.</p>
<p class="text-gray-600">Souhaitez-vous continuer ?</p>
</div>
</div>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelRememberBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmRememberBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Continuer
</button>
</div>
</div>
`;
document.body.appendChild(warningDialog);
document.getElementById('cancelRememberBtn').addEventListener('click', function() {
checkbox.checked = false;
document.body.removeChild(warningDialog);
});
document.getElementById('confirmRememberBtn').addEventListener('click', function() {
document.body.removeChild(warningDialog);
});
}
}
document.addEventListener('DOMContentLoaded', function() {
// Récupérer les identifiants stockés
const savedCredentials = localStorage.getItem('credentials');
if (savedCredentials) {
try {
const credentials = JSON.parse(atob(savedCredentials));
document.getElementById('username').value = credentials.username;
document.getElementById('password').value = credentials.password;
document.getElementById('remember').checked = true;
} catch (e) {
console.error('Error parsing saved credentials');
}
}
});
document.getElementById('loginBtn').addEventListener('click', function() {
const username = document.getElementById('username').value;
const password = document.getElementById('password').value;
const remember = document.getElementById('remember').checked;
if (!username || !password) {
showNotification('Veuillez remplir tous les champs', 'error');
return;
}
// Stocker les identifiants si la case est cochée
if (remember) {
const credentials = btoa(JSON.stringify({
username: username,
password: password
}));
localStorage.setItem('credentials', credentials);
} else {
localStorage.removeItem('credentials');
}
// Show loading state
const originalContent = this.innerHTML;
this.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Connexion...</span>
`;
this.disabled = true;
// Simulate authentication (replace with real authentication)
setTimeout(() => {
// For demo, accept any non-empty credentials
if (username && password) {
document.getElementById('loginModal').classList.add('hidden');
document.body.style.overflow = '';
showNotification('Connexion réussie', 'success');
} else {
showNotification('Identifiants invalides', 'error');
this.innerHTML = originalContent;
this.disabled = false;
}
}, 1000);
});
// Handle Enter key
[username, password].forEach(input => {
input.addEventListener('keypress', function(e) {
if (e.key === 'Enter') {
document.getElementById('loginBtn').click();
}
});
});
});
</script>
<!-- Header with Timer -->
<header class="bg-white shadow-sm py-4 px-6">
<div class="flex justify-between items-center">
<div class="flex items-center gap-4">
<div class="flex items-center gap-2">
<button id="timerBtn" class="w-12 h-12 flex items-center justify-center bg-primary text-white rounded-full shadow-md hover:bg-opacity-90 transition-all" onclick="handleTimerClick()">
<div class="w-12 h-12 flex items-center justify-center">
<i class="ri-play-fill ri-lg"></i>
</div>
</button>
<div class="timer-display text-xl font-semibold" id="timer">00:00:00</div>
</div>
</div>
<div class="w-24 h-8">
<img src="https://public.readdy.ai/ai/img_res/7e74a4953cf8ed522ba68ebe0e51a4a2.jpg" alt="LSPD Logo" class="w-full h-full object-contain">
</div>
<div class="flex items-center gap-4">
<div class="text-sm text-gray-500">
<span id="currentDate">08/04/2025</span>
</div>
</div>
</div>
</header>
<!-- Edit Casier Modal -->
<div id="editCasierModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Modifier le Casier <span id="editCasierId" class="text-primary"></span></h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nom Complet</label>
<input type="text" id="editCasierNom" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Numéro de Téléphone</label>
<input type="tel" id="editCasierTelephone" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Profession</label>
<input type="text" id="editCasierProfession" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date de Naissance</label>
<input type="date" id="editCasierNaissance" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Adresse</label>
<input type="text" id="editCasierAdresse" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Peine</label>
<textarea id="editCasierPeine" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="2" placeholder="Détails des peines et infractions..."></textarea>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Photo</label>
<div class="flex items-center gap-4">
<div class="w-20 h-20 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center shadow-sm transition-all duration-300" id="photoPreview">
<div class="w-20 h-20 flex items-center justify-center">
<i class="ri-user-fill ri-xl text-gray-400"></i>
</div>
</div>
<div class="flex items-center gap-2">
<button class="px-3 py-1.5 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-1 hover:bg-gray-50 transition-all active:scale-95" id="uploadPhotoBtn" onclick="document.getElementById('photoInput').click()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-image-add-line"></i>
</div>
Télécharger une photo
<input type="file" id="photoInput" class="hidden" accept="image/*" onchange="handlePhotoUpload(this)">
</button>
<script>
function handlePhotoUpload(input) {
if (input.files && input.files[0]) {
const file = input.files[0];
// Check file type
if (!file.type.startsWith('image/')) {
showNotification('Veuillez sélectionner une image valide', 'error');
return;
}
// Check file size (max 5MB)
if (file.size > 5 * 1024 * 1024) {
showNotification('L\'image est trop volumineuse (max 5MB)', 'error');
return;
}
const reader = new FileReader();
reader.onload = function(e) {
const photoPreview = document.getElementById('photoPreview');
const removePhotoBtn = document.getElementById('removePhotoBtn');
// Show loading state
photoPreview.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>';
// Create image element
const img = document.createElement('img');
img.src = e.target.result;
img.className = 'w-full h-full object-cover rounded-full';
// Replace loading with image
setTimeout(() => {
photoPreview.innerHTML = '';
photoPreview.appendChild(img);
removePhotoBtn.classList.remove('hidden');
showNotification('Photo téléchargée avec succès', 'success');
}, 500);
};
reader.onerror = function() {
showNotification('Erreur lors du chargement de l\'image', 'error');
};
reader.readAsDataURL(file);
}
}
// PPA Modal Functions
function openCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
function closeCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
}
// View PPA Modal Functions
function initViewPPAButtons() {
const viewButtons = document.querySelectorAll('.view-ppa-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Récupérer la ligne du tableau correspondante
const row = this.closest('tr');
// Récupérer les informations du PPA
const date = row.cells[0]?.textContent || '';
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const type = row.cells[3]?.textContent || '';
const heure = row.cells[4]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const testPsy = row.cells[6]?.querySelector('span')?.textContent || '';
const testPsyClass = row.cells[6]?.querySelector('span')?.className || '';
const munitions = row.cells[7]?.textContent || '';
const statut = row.cells[8]?.querySelector('span')?.textContent || '';
const statutClass = row.cells[8]?.querySelector('span')?.className || '';
// Créer le modal de visualisation
const viewPPAModal = document.createElement('div');
viewPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
viewPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto animate-fade-in">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails du PPA <span class="text-primary">${reference}</span></h3>
<button id="closeViewPPABtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700" onclick="document.body.removeChild(viewPPAModal); document.body.style.overflow = '';">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations principales -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations principales</h4>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Date d'enregistrement</p>
<p class="font-medium">${date}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Heure</p>
<p class="font-medium">${heure}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Modèle d'arme</p>
<p class="font-medium">${armeModel}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Type</p>
<p class="font-medium">${type}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Agent responsable</p>
<p class="font-medium">${agent}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Munitions autorisées</p>
<p class="font-medium">${munitions}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Test psychologique</p>
<p><span class="${testPsyClass}">${testPsy}</span></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Statut</p>
<p><span class="${statutClass}">${statut}</span></p>
</div>
</div>
</div>
<!-- Historique des modifications -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Historique des modifications</h4>
<div class="space-y-3">
<div class="p-3 bg-white rounded shadow-sm">
<div class="flex justify-between items-center">
<p class="text-sm font-medium">Création du dossier</p>
<p class="text-xs text-gray-500">${date}</p>
</div>
<p class="text-sm text-gray-600 mt-1">Dossier créé par ${agent}</p>
</div>
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p class="text-sm">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</p>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<!-- Bouton supprimé -->
</div>
</div>
`;
document.body.appendChild(viewPPAModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons
document.getElementById('closeViewPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const hasChanges = window.ppaDataModified || false;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.ppaDataModified = false; // Réinitialiser l'état des modifications
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
});
} else {
// Si aucune modification n'a été apportée, fermer directement
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
}
});
// Ajouter un gestionnaire d'événements pour la touche Échap
document.addEventListener('keydown', function(e) {
if (e.key === 'Escape' && document.contains(viewPPAModal)) {
document.getElementById('closeViewPPABtn').click();
}
});
// Ajouter des écouteurs d'événements pour détecter les modifications
const editableFields = editPPAModal.querySelectorAll('input, select, textarea');
editableFields.forEach(field => {
field.addEventListener('change', function() {
window.ppaDataModified = true;
});
field.addEventListener('input', function() {
window.ppaDataModified = true;
});
});
document.getElementById('deletePPABtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(viewPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('printPPABtn').addEventListener('click', function() {
// Simuler l'impression
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Préparation de l'impression...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
showNotification('Document envoyé à l\'imprimante', 'success');
}, 1500);
});
document.getElementById('exportPPABtn').addEventListener('click', function() {
// Créer un menu déroulant pour les options d'exportation
const exportMenu = document.createElement('div');
exportMenu.className = 'absolute bottom-16 right-6 bg-white rounded-lg shadow-xl border border-gray-200 z-50 py-2 w-48 animate-fade-in';
exportMenu.innerHTML = `
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="pdf">
<i class="ri-file-pdf-line text-red-500"></i>
Exporter en PDF
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="excel">
<i class="ri-file-excel-line text-green-500"></i>
Exporter en Excel
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="word">
<i class="ri-file-word-line text-blue-500"></i>
Exporter en Word
</button>
`;
// Ajouter le menu à côté du bouton d'exportation
this.parentNode.appendChild(exportMenu);
// Gérer les clics en dehors du menu pour le fermer
const closeExportMenu = function(e) {
if (!exportMenu.contains(e.target) && e.target !== document.getElementById('exportPPABtn')) {
exportMenu.remove();
document.removeEventListener('click', closeExportMenu);
}
};
// Ajouter un délai pour éviter que le menu ne se ferme immédiatement
setTimeout(() => {
document.addEventListener('click', closeExportMenu);
}, 100);
// Gérer les clics sur les options d'exportation
exportMenu.querySelectorAll('button').forEach(button => {
button.addEventListener('click', function() {
const format = this.dataset.format;
exportMenu.remove();
// Simuler l'exportation
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Exportation en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
// Créer un élément <a> invisible pour déclencher le téléchargement
const link = document.createElement('a');
link.href = '#'; // Dans une application réelle, ce serait l'URL du fichier
if (format === 'pdf') {
link.download = `PPA_${reference}.pdf`;
showNotification('Document exporté en PDF', 'success');
} else if (format === 'excel') {
link.download = `PPA_${reference}.xlsx`;
showNotification('Document exporté en Excel', 'success');
} else if (format === 'word') {
link.download = `PPA_${reference}.docx`;
showNotification('Document exporté en Word', 'success');
}
// Simuler un clic sur le lien pour déclencher le téléchargement
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}, 1500);
});
});
});
// Initialiser les boutons de téléchargement
const downloadButtons = viewPPAModal.querySelectorAll('.download-btn');
downloadButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.stopPropagation();
// Ajouter une classe pour indiquer que le téléchargement est en cours
this.classList.add('text-primary', 'animate-pulse');
// Récupérer le nom du fichier à partir de l'attribut data
const filename = this.dataset.filename;
// Gérer le téléchargement
handleFileDownload(filename);
// Retirer l'animation après un délai
setTimeout(() => {
this.classList.remove('animate-pulse');
}, 2000);
});
});
// Gérer le bouton d'édition
document.getElementById('editPPAFromViewBtn').addEventListener('click', function() {
// Indiquer que des modifications pourraient être apportées
window.ppaDataModified = true;
// Fermer le modal de visualisation
document.body.removeChild(viewPPAModal);
document.body.style.overflow = '';
// Créer un modal d'édition (similaire au modal de création mais pré-rempli)
const editPPAModal = document.createElement('div');
editPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
editPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Modifier le PPA <span class="text-primary">${reference}</span></h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editPPAReference" value="${reference}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="editPPAArmeModel" value="${armeModel}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="editPPAType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme" ${type === 'Permis de port d\'arme' ? 'selected' : ''}>Permis de port d'arme</option>
<option value="Renouvellement" ${type === 'Renouvellement' ? 'selected' : ''}>Renouvellement</option>
<option value="Autorisation temporaire" ${type === 'Autorisation temporaire' ? 'selected' : ''}>Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="editPPAHeure" value="${heure}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="editPPAAgent" value="${agent}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="editPPAMunitions" value="${munitions.replace(' cartouches', '')}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="editPPATestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe" ${testPsy.includes('Non passé') ? 'selected' : ''}>Non passé</option>
<option value="en_cours" ${testPsy.includes('En cours') ? 'selected' : ''}>En cours</option>
<option value="valide" ${testPsy.includes('Validé') ? 'selected' : ''}>Validé</option>
<option value="invalide" ${testPsy.includes('Invalidé') ? 'selected' : ''}>Invalidé</option>
</select>
<input type="date" id="editPPATestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="editPPANotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deletePPAFromEditBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditPPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editPPAModal);
document.body.style.overflow = 'hidden';
// Gérer les événements des boutons
document.getElementById('cancelEditPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
if (window.ppaDataModified) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseEditBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseEditBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
window.ppaDataModified = false; // Réinitialiser l'état des modifications
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
}
});
document.getElementById('deletePPAFromEditBtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(editPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('saveEditPPABtn').addEventListener('click', function() {
// Indiquer que des modifications sont en cours
window.ppaDataModified = true;
// Récupérer les valeurs modifiées
const newReference = document.getElementById('editPPAReference').value;
const newArmeModel = document.getElementById('editPPAArmeModel').value;
const newType = document.getElementById('editPPAType').value;
const newHeure = document.getElementById('editPPAHeure').value;
const newAgent = document.getElementById('editPPAAgent').value;
const newMunitions = document.getElementById('editPPAMunitions').value;
const newTestPsy = document.getElementById('editPPATestPsy').value;
const newTestPsyDate = document.getElementById('editPPATestPsyDate').value;
const newNotes = document.getElementById('editPPANotes').value;
// Validation
if (!newReference || !newArmeModel || !newHeure || !newAgent || !newMunitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('saveEditPPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let newTestPsyStatus = '';
let newStatusClass = '';
if (newTestPsy === 'valide') {
newTestPsyStatus = `Validé ${new Date(newTestPsyDate).toLocaleDateString('fr-FR')}`;
newStatusClass = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
} else if (newTestPsy === 'invalide') {
newTestPsyStatus = 'Invalidé';
newStatusClass = 'px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs';
} else if (newTestPsy === 'en_cours') {
newTestPsyStatus = 'En cours';
newStatusClass = 'px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs';
} else {
newTestPsyStatus = 'Non passé';
newStatusClass = 'px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs';
}
// Simulate saving
setTimeout(() => {
// Mettre à jour la ligne dans le tableau
row.cells[1].textContent = newReference;
row.cells[2].textContent = newArmeModel;
row.cells[3].textContent = newType;
row.cells[4].textContent = newHeure;
row.cells[5].textContent = newAgent;
row.cells[6].innerHTML = `<span class="${newStatusClass}">${newTestPsyStatus}</span>`;
row.cells[7].textContent = `${newMunitions} cartouches`;
// Ajouter un effet de highlight à la ligne modifiée
row.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
row.classList.remove('bg-green-50', 'transition-all');
}, 1500);
// Fermer le modal d'édition
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
// Réinitialiser l'état des modifications après sauvegarde
window.ppaDataModified = false;
// Afficher une notification de succès
showNotification('PPA modifié avec succès', 'success');
}, 1500);
});
});
});
});
}
// Edit PPA Modal Functions
function initEditPPAButtons() {
// Initialiser les boutons de suppression de PPA
const deleteButtons = document.querySelectorAll('.delete-ppa-btn');
deleteButtons.forEach(button => {
if (!button.hasAttribute('onclick')) {
button.setAttribute('onclick', 'event.stopPropagation(); deletePPA(this)');
}
});
}
// Fonction de suppression de PPA
function deletePPA(button) {
// Récupérer la ligne du tableau correspondante
const row = button.closest('tr');
// Récupérer les informations du PPA
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const date = row.cells[0]?.textContent || new Date().toLocaleDateString('fr-FR');
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Ajouter une animation de fermeture en douceur
deleteConfirmModal.style.transition = 'opacity 0.3s ease';
deleteConfirmModal.style.opacity = '0';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(deleteConfirmModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}, 300);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau définitivement
row.remove();
// Supprimer le modal de confirmation et l'indicateur de chargement
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('PPA supprimé définitivement', 'success');
}, 1000);
});
}
// Initialize PPA buttons on page load
document.addEventListener('DOMContentLoaded', function() {
initEditPPAButtons();
initViewPPAButtons();
// Réinitialiser les boutons PPA après l'ajout d'un nouveau PPA
document.getElementById('savePPABtn')?.addEventListener('click', function() {
setTimeout(() => {
initEditPPAButtons();
initViewPPAButtons();
}, 1000);
});
});
function savePPA() {
const reference = document.getElementById('ppaReference').value;
const armeModel = document.getElementById('ppaArmeModel').value;
const type = document.getElementById('ppaType').value;
const heure = document.getElementById('ppaHeure').value;
const agent = document.getElementById('ppaAgent').value;
const munitions = document.getElementById('ppaMunitions').value;
const testPsy = document.getElementById('ppaTestPsy').value;
const testPsyDate = document.getElementById('ppaTestPsyDate').value;
// Validation
if (!reference || !armeModel || !heure || !agent || !munitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('savePPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let testPsyStatus = '';
let statusClass = '';
if (testPsy === 'valide') {
testPsyStatus = `Validé ${new Date(testPsyDate).toLocaleDateString('fr-FR')}`;
statusClass = 'bg-green-100 text-green-800';
} else if (testPsy === 'invalide') {
testPsyStatus = 'Invalidé';
statusClass = 'bg-red-100 text-red-800';
} else if (testPsy === 'en_cours') {
testPsyStatus = 'En cours';
statusClass = 'bg-yellow-100 text-yellow-800';
} else {
testPsyStatus = 'Non passé';
statusClass = 'bg-gray-100 text-gray-800';
}
// Simulate saving
setTimeout(() => {
const ppaTable = document.querySelector('#ppa table tbody');
const newRow = document.createElement('tr');
newRow.className = 'border-b';
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${new Date().toLocaleDateString('fr-FR')}</td>
<td class="px-4 py-3 text-sm">${reference}</td>
<td class="px-4 py-3 text-sm">${armeModel}</td>
<td class="px-4 py-3 text-sm">${type}</td>
<td class="px-4 py-3 text-sm">${heure}</td>
<td class="px-4 py-3 text-sm">${agent}</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 ${statusClass} rounded-full text-xs">${testPsyStatus}</span>
</td>
<td class="px-4 py-3 text-sm">${munitions} cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
`;
// Add with highlight effect
newRow.classList.add('bg-green-50');
ppaTable.insertBefore(newRow, ppaTable.firstChild);
// Reset form
document.getElementById('ppaReference').value = '';
document.getElementById('ppaArmeModel').value = '';
document.getElementById('ppaType').selectedIndex = 0;
document.getElementById('ppaHeure').value = '';
document.getElementById('ppaAgent').value = '';
document.getElementById('ppaMunitions').value = '';
document.getElementById('ppaTestPsy').selectedIndex = 0;
document.getElementById('ppaTestPsyDate').value = '';
document.getElementById('ppaNotes').value = '';
// Close modal
closeCreatePPAModal();
// Show success notification
showNotification('PPA créé avec succès', 'success');
// Remove highlight effect
setTimeout(() => {
newRow.classList.remove('bg-green-50');
}, 1000);
// Restore button state
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Réinitialiser les boutons de suppression pour le nouveau PPA
setTimeout(() => {
initEditPPAButtons();
}, 100);
}, 800);
}
</script>
<button class="px-3 py-1.5 border border-red-200 text-red-600 rounded-button text-sm whitespace-nowrap hidden flex items-center gap-1 hover:bg-red-50 transition-colors" id="removePhotoBtn">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<input type="file" id="photoInput" accept="image/*" class="hidden">
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
<textarea id="editCasierNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3"></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deleteCasierBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditCasierBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditCasierBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
<span>Enregistrer</span>
</button>
</div>
</div>
</div>
</div>
<!-- Main Navigation -->
<nav class="bg-white shadow-sm">
<div class="flex px-6">
<button id="paperasseBtn" class="tab-active py-4 px-6 font-medium text-base focus:outline-none">
Paperasse
</button>
<button id="travailBtn" class="py-4 px-6 font-medium text-base text-gray-500 focus:outline-none">
Travail
</button>
</div>
</nav>
<!-- Main Content -->
<main class="flex-grow p-6">
<!-- Travail Section (Casiers) - Moved to top -->
<div id="travailSection" class="block">
<div class="mb-6 flex justify-between items-center">
<h2 class="text-xl font-semibold">Casiers des Personnes</h2>
<div class="flex gap-3">
<button id="createCasierBtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Créer un Casier
</button>
</div>
</div>
<!-- Search Box -->
<div class="bg-white rounded shadow-sm p-4 mb-6">
<div class="relative">
<input type="text" placeholder="Rechercher un casier..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<div class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400">
<div class="w-5 h-5 flex items-center justify-center">
<i class="ri-search-line"></i>
</div>
</div>
</div>
</div>
<!-- Casiers Grid -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
<!-- Casier 3 -->
<div class="bg-white rounded shadow-sm overflow-hidden">
<div class="p-4 border-b">
<div class="flex items-center gap-4">
<div class="w-16 h-16 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center shadow-sm">
<div class="w-16 h-16 flex items-center justify-center">
<i class="ri-user-fill ri-xl text-gray-400"></i>
</div>
</div>
<div>
<h3 class="font-semibold">Thomas Mercier</h3>
<p class="text-sm text-gray-500">Dossier #2025-0125</p>
</div>
</div>
</div>
<div class="p-4">
<div class="grid grid-cols-2 gap-4 mb-4">
<div>
<p class="text-xs text-gray-500 mb-1">Téléphone</p>
<p class="text-sm">06 45 67 89 01</p>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Profession</p>
<p class="text-sm">Restaurateur</p>
</div>
<div class="col-span-2">
<p class="text-xs text-gray-500 mb-1">Adresse</p>
<p class="text-sm">42 Rue Saint-Michel, 75005 Paris</p>
</div>
</div>
<div class="mb-4">
<p class="text-xs text-gray-500 mb-1">Peines</p>
<div class="bg-gray-50 p-2 rounded text-sm">
<p class="mb-1">• Amende 180€ (02/04/2025) - Excès de vitesse</p>
<p>• Retrait de permis 1 mois (15/02/2025) - Alcoolémie</p>
</div>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Notes</p>
<p class="text-sm">Récidiviste. À surveiller particulièrement. Attitude parfois agressive.</p>
</div>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-2">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary view-casier-btn"
data-id="2025-0125"
data-nom="Thomas Mercier"
data-telephone="06 45 67 89 01"
data-profession="Restaurateur"
data-adresse="42 Rue Saint-Michel, 75005 Paris"
data-peine="• Amende 180€ (02/04/2025) - Excès de vitesse
• Retrait de permis 1 mois (15/02/2025) - Alcoolémie"
data-notes="Récidiviste. À surveiller particulièrement. Attitude parfois agressive."
data-naissance="1978-11-30">
<i class="ri-eye-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-casier-btn"
data-id="2025-0125"
data-nom="Thomas Mercier"
data-telephone="06 45 67 89 01"
data-profession="Restaurateur"
data-adresse="42 Rue Saint-Michel, 75005 Paris"
data-peine="• Amende 180€ (02/04/2025) - Excès de vitesse
• Retrait de permis 1 mois (15/02/2025) - Alcoolémie"
data-notes="Récidiviste. À surveiller particulièrement. Attitude parfois agressive."
data-naissance="1978-11-30">
<i class="ri-edit-line"></i>
</button>
</div>
</div>
</div>
<!-- Casier 2 -->
<div class="bg-white rounded shadow-sm overflow-hidden">
<div class="p-4 border-b">
<div class="flex items-center gap-4">
<div class="w-16 h-16 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center shadow-sm">
<div class="w-16 h-16 flex items-center justify-center">
<i class="ri-user-fill ri-xl text-gray-400"></i>
</div>
</div>
<div>
<h3 class="font-semibold">Émilie Laurent</h3>
<p class="text-sm text-gray-500">Dossier #2025-0138</p>
</div>
</div>
</div>
<div class="p-4">
<div class="grid grid-cols-2 gap-4 mb-4">
<div>
<p class="text-xs text-gray-500 mb-1">Téléphone</p>
<p class="text-sm">07 98 76 54 32</p>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Profession</p>
<p class="text-sm">Enseignante</p>
</div>
<div class="col-span-2">
<p class="text-xs text-gray-500 mb-1">Adresse</p>
<p class="text-sm">8 Avenue Victor Hugo, 75016 Paris</p>
</div>
</div>
<div class="mb-4">
<p class="text-xs text-gray-500 mb-1">Peines</p>
<div class="bg-gray-50 p-2 rounded text-sm">
<p class="mb-1">• Amende 135€ (20/03/2025) - Téléphone au volant</p>
<p>• Amende 45€ (05/01/2025) - Stationnement gênant</p>
</div>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Notes</p>
<p class="text-sm">A contesté la première amende mais a finalement payé. Attitude correcte.</p>
</div>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-2">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary view-casier-btn"
data-id="2025-0138"
data-nom="Émilie Laurent"
data-telephone="07 98 76 54 32"
data-profession="Enseignante"
data-adresse="8 Avenue Victor Hugo, 75016 Paris"
data-peine="• Amende 135€ (20/03/2025) - Téléphone au volant
• Amende 45€ (05/01/2025) - Stationnement gênant"
data-notes="A contesté la première amende mais a finalement payé. Attitude correcte."
data-naissance="1990-03-22">
<i class="ri-eye-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-casier-btn"
data-id="2025-0138"
data-nom="Émilie Laurent"
data-telephone="07 98 76 54 32"
data-profession="Enseignante"
data-adresse="8 Avenue Victor Hugo, 75016 Paris"
data-peine="• Amende 135€ (20/03/2025) - Téléphone au volant
• Amende 45€ (05/01/2025) - Stationnement gênant"
data-notes="A contesté la première amende mais a finalement payé. Attitude correcte."
data-naissance="1990-03-22">
<i class="ri-edit-line"></i>
</button>
</div>
</div>
</div>
<!-- Casier 1 -->
<div class="bg-white rounded shadow-sm overflow-hidden">
<div class="p-4 border-b">
<div class="flex items-center gap-4">
<div class="w-16 h-16 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center shadow-sm">
<div class="w-16 h-16 flex items-center justify-center">
<i class="ri-user-fill ri-xl text-gray-400"></i>
</div>
</div>
<div>
<h3 class="font-semibold">Antoine Dubois</h3>
<p class="text-sm text-gray-500">Dossier #2025-0142</p>
</div>
</div>
</div>
<div class="p-4">
<div class="grid grid-cols-2 gap-4 mb-4">
<div>
<p class="text-xs text-gray-500 mb-1">Téléphone</p>
<p class="text-sm">06 12 34 56 78</p>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Profession</p>
<p class="text-sm">Chauffeur-livreur</p>
</div>
<div class="col-span-2">
<p class="text-xs text-gray-500 mb-1">Adresse</p>
<p class="text-sm">15 Rue des Lilas, 75011 Paris</p>
</div>
</div>
<div class="mb-4">
<p class="text-xs text-gray-500 mb-1">Peines</p>
<div class="bg-gray-50 p-2 rounded text-sm">
<p class="mb-1">• Amende 90€ (15/03/2025) - Stationnement interdit</p>
<p>• Avertissement (02/02/2025) - Excès de vitesse mineur</p>
</div>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Notes</p>
<p class="text-sm">Coopératif lors des contrôles. A présenté des excuses pour les infractions.</p>
</div>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-2">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary view-casier-btn"
data-id="2025-0142"
data-nom="Antoine Dubois"
data-telephone="06 12 34 56 78"
data-profession="Chauffeur-livreur"
data-adresse="15 Rue des Lilas, 75011 Paris"
data-peine="• Amende 90€ (15/03/2025) - Stationnement interdit
• Avertissement (02/02/2025) - Excès de vitesse mineur"
data-notes="Coopératif lors des contrôles. A présenté des excuses pour les infractions."
data-naissance="1985-06-15">
<i class="ri-eye-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-casier-btn"
data-id="2025-0142"
data-nom="Antoine Dubois"
data-telephone="06 12 34 56 78"
data-profession="Chauffeur-livreur"
data-adresse="15 Rue des Lilas, 75011 Paris"
data-peine="• Amende 90€ (15/03/2025) - Stationnement interdit
• Avertissement (02/02/2025) - Excès de vitesse mineur"
data-notes="Coopératif lors des contrôles. A présenté des excuses pour les infractions."
data-naissance="1985-06-15">
<i class="ri-edit-line"></i>
</button>
</div>
</div>
</div>
</div>
</div>
<!-- Paperasse Section -->
<div id="paperasseSection" class="hidden">
<!-- Sub Navigation -->
<div class="bg-white rounded shadow-sm mb-6">
<div class="flex border-b">
<button class="paperasse-tab tab-active py-3 px-6 font-medium text-base focus:outline-none" data-target="amendes">
Amendes
</button>
<button class="paperasse-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="depenses">
Dépenses
</button>
<button class="paperasse-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="temps">
Temps
</button>
<button class="paperasse-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="papiers">
Papiers/Brouillons
</button>
<button class="paperasse-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="ppa">
PPA
</button>
</div>
<div id="ppa" class="paperasse-content p-6 hidden">
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Procédures de Police Administrative</h2>
<button id="createPPABtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap" onclick="openCreatePPAModal()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Nouveau PPA
</button>
</div>
<!-- Create PPA Modal -->
<div id="createPPAModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Créer un Nouveau PPA</h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="ppaReference" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="PPA-2025-XXXX">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="ppaArmeModel" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Ex: Glock 17">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="ppaType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme">Permis de port d'arme</option>
<option value="Renouvellement">Renouvellement</option>
<option value="Autorisation temporaire">Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="ppaHeure" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="ppaAgent" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Nom et grade de l'agent">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="ppaMunitions" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Ex: 50">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="ppaTestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe">Non passé</option>
<option value="en_cours">En cours</option>
<option value="valide">Validé</option>
<option value="invalide">Invalidé</option>
</select>
<input type="date" id="ppaTestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
<div class="relative">
<select id="ppaStatut" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="en_attente">En attente</option>
<option value="valide">Validé</option>
<option value="refuse">Refusé</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="ppaNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3" placeholder="Observations, remarques..."></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap" onclick="closeCreatePPAModal()">
Annuler
</button>
<button id="savePPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2" onclick="savePPA()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
<div class="overflow-x-auto">
<table class="w-full border-collapse">
<thead>
<tr class="bg-gray-50">
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Date</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Référence</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Modèle d'arme</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Type</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Heure</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Agent responsable</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Test psychologique</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Munitions</th>
</tr>
</thead>
<tbody>
<tr class="border-b">
<td class="px-4 py-3 text-sm">05/04/2025</td>
<td class="px-4 py-3 text-sm">PPA-2025-0112</td>
<td class="px-4 py-3 text-sm">Glock 17</td>
<td class="px-4 py-3 text-sm">Permis de port d'arme</td>
<td class="px-4 py-3 text-sm">14:30</td>
<td class="px-4 py-3 text-sm">Lt. Martin Dubois</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Validé 03/04/2025</span>
</td>
<td class="px-4 py-3 text-sm">50 cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<!-- Amendes Content -->
<div id="amendes" class="paperasse-content p-6 show">
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Liste des Amendes</h2>
<button id="createAmendeBtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Nouvelle Amende
</button>
</div>
<div class="overflow-x-auto">
<table class="w-full border-collapse">
<thead>
<tr class="bg-gray-50">
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Date</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Référence</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Personne</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Montant</th>
</tr>
</thead>
<tbody>
<tr class="border-b">
<td class="px-4 py-3 text-sm">28/03/2025</td>
<td class="px-4 py-3 text-sm">AMN-2025-0405</td>
<td class="px-4 py-3 text-sm">Lucas Petit</td>
<td class="px-4 py-3 text-sm">175 €</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">Impayée</span>
</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary view-amende-btn" data-ref="AMN-2025-0405" data-date="28/03/2025" data-personne="Lucas Petit" data-montant="175" data-statut="Impayée" data-type="Excès de vitesse" data-lieu="Boulevard Périphérique, Porte de Vincennes" data-notes="Excès de vitesse de 31 km/h. Contrevenant déjà verbalisé pour des infractions similaires. Relance envoyée le 05/04/2025.">
<i class="ri-eye-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-amende-btn">
<i class="ri-edit-line"></i>
</button>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<!-- Depenses Content -->
<div id="depenses" class="paperasse-content p-6 hidden">
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Suivi des Dépenses</h2>
<button id="createDepenseBtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Nouvelle Dépense
</button>
</div>
<div class="overflow-x-auto">
<table class="w-full border-collapse">
<thead>
<tr class="bg-gray-50">
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Date</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Catégorie</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Description</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Montant</th>
</tr>
</thead>
<tbody>
<tr class="border-b">
<td class="px-4 py-3 text-sm">06/04/2025</td>
<td class="px-4 py-3 text-sm">Fournitures</td>
<td class="px-4 py-3 text-sm">Achat de papier et stylos</td>
<td class="px-4 py-3 text-sm">45,20 €</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-depense-btn">
<i class="ri-edit-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 supprimerModified" onclick="confirmDeleteDepense(this)">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
<tr class="border-b">
<td class="px-4 py-3 text-sm">03/04/2025</td>
<td class="px-4 py-3 text-sm">Transport</td>
<td class="px-4 py-3 text-sm">Carburant véhicule de service</td>
<td class="px-4 py-3 text-sm">78,50 €</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-depense-btn">
<i class="ri-edit-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 supprimerModified" onclick="confirmDeleteDepense(this)">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
<tr class="border-b">
<td class="px-4 py-3 text-sm">25/03/2025</td>
<td class="px-4 py-3 text-sm">Équipement</td>
<td class="px-4 py-3 text-sm">Maintenance imprimante</td>
<td class="px-4 py-3 text-sm">120,00 €</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-depense-btn">
<i class="ri-edit-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 supprimerModified" onclick="confirmDeleteDepense(this)">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<!-- Papiers/Brouillons Content -->
<div id="temps" class="paperasse-content p-6 hidden">
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Gestion des Temps</h2>
<button id="saveTimerBtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
<!-- Timer actif -->
<div class="lg:col-span-2 bg-white rounded shadow-sm p-6">
<h3 class="text-base font-semibold mb-4">Timer actif</h3>
<div class="flex items-center gap-6">
<button id="timerBtn" class="w-12 h-12 flex items-center justify-center bg-primary text-white rounded-full shadow-md hover:bg-opacity-90 transition-all" onclick="handleTimerClick()">
<div class="w-12 h-12 flex items-center justify-center">
<i class="ri-play-fill ri-lg"></i>
</div>
</button>
<div>
<div class="timer-display text-3xl font-semibold mb-1" id="timer">00:00:00</div>
<p class="text-sm text-gray-500">Démarrer pour commencer <span id="timerStartTime">--:--</span></p>
</div>
</div>
</div>
</div>
<!-- Historique -->
<div class="bg-white rounded shadow-sm">
<div class="flex border-b">
<button class="timer-tab tab-active py-3 px-6 font-medium text-base focus:outline-none" data-target="today">
Aujourd'hui
</button>
<button class="timer-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="week">
Cette semaine
</button>
<button class="timer-tab py-3 px-6 font-medium text-base text-gray-500 focus:outline-none" data-target="month">
Ce mois
</button>
</div>
<div class="overflow-x-auto">
<table class="w-full border-collapse">
<thead>
<tr class="bg-gray-50">
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Date</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Heure de début</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Durée</th>
</tr>
</thead>
<tbody id="timerHistoryBody">
<!-- Les enregistrements seront ajoutés ici dynamiquement -->
<tr>
<td colspan="4" class="px-4 py-6 text-sm text-center text-gray-500">
Aucun enregistrement pour le moment
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="papiers" class="paperasse-content p-6 hidden">
<!-- Ajout du contenu pour PPA -->
<div id="ppa" class="paperasse-content p-6 hidden">
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Procédures de Police Administrative</h2>
<button id="createPPABtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap" onclick="openCreatePPAModal()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Nouveau PPA
</button>
</div>
<!-- Create PPA Modal -->
<div id="createPPAModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Créer un Nouveau PPA</h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="ppaReference" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="PPA-2025-XXXX">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="ppaArmeModel" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Ex: Glock 17">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="ppaType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme">Permis de port d'arme</option>
<option value="Renouvellement">Renouvellement</option>
<option value="Autorisation temporaire">Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="ppaHeure" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="ppaAgent" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Nom et grade de l'agent">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="ppaMunitions" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Ex: 50">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="ppaTestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe">Non passé</option>
<option value="en_cours">En cours</option>
<option value="valide">Validé</option>
<option value="invalide">Invalidé</option>
</select>
<input type="date" id="ppaTestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
<div class="relative">
<select id="ppaStatut" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="en_attente">En attente</option>
<option value="valide">Validé</option>
<option value="refuse">Refusé</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="ppaNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3" placeholder="Observations, remarques..."></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap" onclick="closeCreatePPAModal()">
Annuler
</button>
<button id="savePPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2" onclick="savePPA()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
<div class="overflow-x-auto">
<table class="w-full border-collapse">
<thead>
<tr class="bg-gray-50">
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Date</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Référence</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Modèle d'arme</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Type</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Heure</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Agent responsable</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Test psychologique</th>
<th class="px-4 py-3 text-left text-sm font-medium text-gray-500">Munitions</th>
</tr>
</thead>
<tbody>
<tr class="border-b">
<td class="px-4 py-3 text-sm">05/04/2025</td>
<td class="px-4 py-3 text-sm">PPA-2025-0112</td>
<td class="px-4 py-3 text-sm">Glock 17</td>
<td class="px-4 py-3 text-sm">Permis de port d'arme</td>
<td class="px-4 py-3 text-sm">14:30</td>
<td class="px-4 py-3 text-sm">Lt. Martin Dubois</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Validé 03/04/2025</span>
</td>
<td class="px-4 py-3 text-sm">50 cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
<tr class="border-b">
<td class="px-4 py-3 text-sm">02/04/2025</td>
<td class="px-4 py-3 text-sm">PPA-2025-0111</td>
<td class="px-4 py-3 text-sm">Vérification d'autorisation</td>
<td class="px-4 py-3 text-sm">Restaurant Le Gourmet, 8 Avenue Victor Hugo</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Terminée</span>
</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
<tr class="border-b">
<td class="px-4 py-3 text-sm">28/03/2025</td>
<td class="px-4 py-3 text-sm">PPA-2025-0110</td>
<td class="px-4 py-3 text-sm">Inspection sanitaire</td>
<td class="px-4 py-3 text-sm">Café des Arts, 42 Rue Saint-Michel</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">Non conforme</span>
</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="mb-4 flex justify-between items-center">
<h2 class="text-xl font-semibold">Notes et Brouillons</h2>
<button id="saveNotesBtn" class="bg-primary text-white px-4 py-2 rounded-button flex items-center gap-2 whitespace-nowrap">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
<div class="bg-white rounded shadow-sm p-4">
<textarea id="notesTextarea" class="w-full border-none note-area p-4 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50 rounded bg-gray-50" placeholder="Écrivez vos notes ici...">Réunion du 05/04/2025 - Points à aborder:
- Révision des procédures de contrôle
- Mise à jour des formulaires d'amendes
- Organisation des patrouilles pour le weekend
- Préparation du rapport mensuel
Contacts à rappeler:
- Commissariat central: coordination pour l'événement du 15/04
- Service technique: problème d'accès au système informatique
Idées pour améliorer le service:
- Simplifier le processus de saisie des amendes
- Former l'équipe aux nouveaux outils numériques
- Mettre à jour la base de données des contrevenants récidivistes</textarea>
</div>
</div>
</div>
</div>
<!-- Cette section a été déplacée au début du main content -->
<!-- Create Casier Modal -->
<div id="createCasierModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Créer un Nouveau Casier</h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nom Complet</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Numéro de Téléphone</label>
<input type="tel" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Profession</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date de Naissance</label>
<input type="date" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Adresse</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Peine</label>
<textarea class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="2" placeholder="Détails des peines et infractions..."></textarea>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Photo</label>
<div class="flex items-center gap-4">
<div class="w-20 h-20 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center shadow-sm transition-all duration-300" id="photoPreview">
<div class="w-20 h-20 flex items-center justify-center">
<i class="ri-user-fill ri-xl text-gray-400"></i>
</div>
</div>
<div class="flex items-center gap-2">
<button class="px-3 py-1.5 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-1 hover:bg-gray-50 transition-all active:scale-95" id="uploadPhotoBtn" onclick="document.getElementById('photoInput').click()">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-image-add-line"></i>
</div>
Télécharger une photo
<input type="file" id="photoInput" class="hidden" accept="image/*" onchange="handlePhotoUpload(this)">
</button>
<script>
function handlePhotoUpload(input) {
if (input.files && input.files[0]) {
const file = input.files[0];
// Check file type
if (!file.type.startsWith('image/')) {
showNotification('Veuillez sélectionner une image valide', 'error');
return;
}
// Check file size (max 5MB)
if (file.size > 5 * 1024 * 1024) {
showNotification('L\'image est trop volumineuse (max 5MB)', 'error');
return;
}
const reader = new FileReader();
reader.onload = function(e) {
const photoPreview = document.getElementById('photoPreview');
const removePhotoBtn = document.getElementById('removePhotoBtn');
// Show loading state
photoPreview.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>';
// Create image element
const img = document.createElement('img');
img.src = e.target.result;
img.className = 'w-full h-full object-cover rounded-full';
// Replace loading with image
setTimeout(() => {
photoPreview.innerHTML = '';
photoPreview.appendChild(img);
removePhotoBtn.classList.remove('hidden');
showNotification('Photo téléchargée avec succès', 'success');
}, 500);
};
reader.onerror = function() {
showNotification('Erreur lors du chargement de l\'image', 'error');
};
reader.readAsDataURL(file);
}
}
// PPA Modal Functions
function openCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
function closeCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
}
// View PPA Modal Functions
function initViewPPAButtons() {
const viewButtons = document.querySelectorAll('.view-ppa-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Récupérer la ligne du tableau correspondante
const row = this.closest('tr');
// Récupérer les informations du PPA
const date = row.cells[0]?.textContent || '';
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const type = row.cells[3]?.textContent || '';
const heure = row.cells[4]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const testPsy = row.cells[6]?.querySelector('span')?.textContent || '';
const testPsyClass = row.cells[6]?.querySelector('span')?.className || '';
const munitions = row.cells[7]?.textContent || '';
const statut = row.cells[8]?.querySelector('span')?.textContent || '';
const statutClass = row.cells[8]?.querySelector('span')?.className || '';
// Créer le modal de visualisation
const viewPPAModal = document.createElement('div');
viewPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
viewPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto animate-fade-in">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails du PPA <span class="text-primary">${reference}</span></h3>
<button id="closeViewPPABtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700" onclick="document.body.removeChild(viewPPAModal); document.body.style.overflow = '';">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations principales -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations principales</h4>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Date d'enregistrement</p>
<p class="font-medium">${date}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Heure</p>
<p class="font-medium">${heure}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Modèle d'arme</p>
<p class="font-medium">${armeModel}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Type</p>
<p class="font-medium">${type}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Agent responsable</p>
<p class="font-medium">${agent}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Munitions autorisées</p>
<p class="font-medium">${munitions}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Test psychologique</p>
<p><span class="${testPsyClass}">${testPsy}</span></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Statut</p>
<p><span class="${statutClass}">${statut}</span></p>
</div>
</div>
</div>
<!-- Historique des modifications -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Historique des modifications</h4>
<div class="space-y-3">
<div class="p-3 bg-white rounded shadow-sm">
<div class="flex justify-between items-center">
<p class="text-sm font-medium">Création du dossier</p>
<p class="text-xs text-gray-500">${date}</p>
</div>
<p class="text-sm text-gray-600 mt-1">Dossier créé par ${agent}</p>
</div>
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p class="text-sm">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</p>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<!-- Bouton supprimé -->
</div>
</div>
`;
document.body.appendChild(viewPPAModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons
document.getElementById('closeViewPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const hasChanges = window.ppaDataModified || false;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.ppaDataModified = false; // Réinitialiser l'état des modifications
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
});
} else {
// Si aucune modification n'a été apportée, fermer directement
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
}
});
// Ajouter un gestionnaire d'événements pour la touche Échap
document.addEventListener('keydown', function(e) {
if (e.key === 'Escape' && document.contains(viewPPAModal)) {
document.getElementById('closeViewPPABtn').click();
}
});
// Ajouter des écouteurs d'événements pour détecter les modifications
const editableFields = editPPAModal.querySelectorAll('input, select, textarea');
editableFields.forEach(field => {
field.addEventListener('change', function() {
window.ppaDataModified = true;
});
field.addEventListener('input', function() {
window.ppaDataModified = true;
});
});
document.getElementById('deletePPABtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(viewPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('printPPABtn').addEventListener('click', function() {
// Simuler l'impression
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Préparation de l'impression...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
showNotification('Document envoyé à l\'imprimante', 'success');
}, 1500);
});
document.getElementById('exportPPABtn').addEventListener('click', function() {
// Créer un menu déroulant pour les options d'exportation
const exportMenu = document.createElement('div');
exportMenu.className = 'absolute bottom-16 right-6 bg-white rounded-lg shadow-xl border border-gray-200 z-50 py-2 w-48 animate-fade-in';
exportMenu.innerHTML = `
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="pdf">
<i class="ri-file-pdf-line text-red-500"></i>
Exporter en PDF
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="excel">
<i class="ri-file-excel-line text-green-500"></i>
Exporter en Excel
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="word">
<i class="ri-file-word-line text-blue-500"></i>
Exporter en Word
</button>
`;
// Ajouter le menu à côté du bouton d'exportation
this.parentNode.appendChild(exportMenu);
// Gérer les clics en dehors du menu pour le fermer
const closeExportMenu = function(e) {
if (!exportMenu.contains(e.target) && e.target !== document.getElementById('exportPPABtn')) {
exportMenu.remove();
document.removeEventListener('click', closeExportMenu);
}
};
// Ajouter un délai pour éviter que le menu ne se ferme immédiatement
setTimeout(() => {
document.addEventListener('click', closeExportMenu);
}, 100);
// Gérer les clics sur les options d'exportation
exportMenu.querySelectorAll('button').forEach(button => {
button.addEventListener('click', function() {
const format = this.dataset.format;
exportMenu.remove();
// Simuler l'exportation
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Exportation en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
// Créer un élément <a> invisible pour déclencher le téléchargement
const link = document.createElement('a');
link.href = '#'; // Dans une application réelle, ce serait l'URL du fichier
if (format === 'pdf') {
link.download = `PPA_${reference}.pdf`;
showNotification('Document exporté en PDF', 'success');
} else if (format === 'excel') {
link.download = `PPA_${reference}.xlsx`;
showNotification('Document exporté en Excel', 'success');
} else if (format === 'word') {
link.download = `PPA_${reference}.docx`;
showNotification('Document exporté en Word', 'success');
}
// Simuler un clic sur le lien pour déclencher le téléchargement
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}, 1500);
});
});
});
// Initialiser les boutons de téléchargement
const downloadButtons = viewPPAModal.querySelectorAll('.download-btn');
downloadButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.stopPropagation();
// Ajouter une classe pour indiquer que le téléchargement est en cours
this.classList.add('text-primary', 'animate-pulse');
// Récupérer le nom du fichier à partir de l'attribut data
const filename = this.dataset.filename;
// Gérer le téléchargement
handleFileDownload(filename);
// Retirer l'animation après un délai
setTimeout(() => {
this.classList.remove('animate-pulse');
}, 2000);
});
});
// Gérer le bouton d'édition
document.getElementById('editPPAFromViewBtn').addEventListener('click', function() {
// Indiquer que des modifications pourraient être apportées
window.ppaDataModified = true;
// Fermer le modal de visualisation
document.body.removeChild(viewPPAModal);
document.body.style.overflow = '';
// Créer un modal d'édition (similaire au modal de création mais pré-rempli)
const editPPAModal = document.createElement('div');
editPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
editPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Modifier le PPA <span class="text-primary">${reference}</span></h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editPPAReference" value="${reference}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="editPPAArmeModel" value="${armeModel}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="editPPAType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme" ${type === 'Permis de port d\'arme' ? 'selected' : ''}>Permis de port d'arme</option>
<option value="Renouvellement" ${type === 'Renouvellement' ? 'selected' : ''}>Renouvellement</option>
<option value="Autorisation temporaire" ${type === 'Autorisation temporaire' ? 'selected' : ''}>Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="editPPAHeure" value="${heure}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="editPPAAgent" value="${agent}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="editPPAMunitions" value="${munitions.replace(' cartouches', '')}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="editPPATestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe" ${testPsy.includes('Non passé') ? 'selected' : ''}>Non passé</option>
<option value="en_cours" ${testPsy.includes('En cours') ? 'selected' : ''}>En cours</option>
<option value="valide" ${testPsy.includes('Validé') ? 'selected' : ''}>Validé</option>
<option value="invalide" ${testPsy.includes('Invalidé') ? 'selected' : ''}>Invalidé</option>
</select>
<input type="date" id="editPPATestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="editPPANotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deletePPAFromEditBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditPPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editPPAModal);
document.body.style.overflow = 'hidden';
// Gérer les événements des boutons
document.getElementById('cancelEditPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
if (window.ppaDataModified) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseEditBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseEditBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
window.ppaDataModified = false; // Réinitialiser l'état des modifications
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
}
});
document.getElementById('deletePPAFromEditBtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(editPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('saveEditPPABtn').addEventListener('click', function() {
// Indiquer que des modifications sont en cours
window.ppaDataModified = true;
// Récupérer les valeurs modifiées
const newReference = document.getElementById('editPPAReference').value;
const newArmeModel = document.getElementById('editPPAArmeModel').value;
const newType = document.getElementById('editPPAType').value;
const newHeure = document.getElementById('editPPAHeure').value;
const newAgent = document.getElementById('editPPAAgent').value;
const newMunitions = document.getElementById('editPPAMunitions').value;
const newTestPsy = document.getElementById('editPPATestPsy').value;
const newTestPsyDate = document.getElementById('editPPATestPsyDate').value;
const newNotes = document.getElementById('editPPANotes').value;
// Validation
if (!newReference || !newArmeModel || !newHeure || !newAgent || !newMunitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('saveEditPPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let newTestPsyStatus = '';
let newStatusClass = '';
if (newTestPsy === 'valide') {
newTestPsyStatus = `Validé ${new Date(newTestPsyDate).toLocaleDateString('fr-FR')}`;
newStatusClass = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
} else if (newTestPsy === 'invalide') {
newTestPsyStatus = 'Invalidé';
newStatusClass = 'px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs';
} else if (newTestPsy === 'en_cours') {
newTestPsyStatus = 'En cours';
newStatusClass = 'px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs';
} else {
newTestPsyStatus = 'Non passé';
newStatusClass = 'px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs';
}
// Simulate saving
setTimeout(() => {
// Mettre à jour la ligne dans le tableau
row.cells[1].textContent = newReference;
row.cells[2].textContent = newArmeModel;
row.cells[3].textContent = newType;
row.cells[4].textContent = newHeure;
row.cells[5].textContent = newAgent;
row.cells[6].innerHTML = `<span class="${newStatusClass}">${newTestPsyStatus}</span>`;
row.cells[7].textContent = `${newMunitions} cartouches`;
// Ajouter un effet de highlight à la ligne modifiée
row.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
row.classList.remove('bg-green-50', 'transition-all');
}, 1500);
// Fermer le modal d'édition
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
// Réinitialiser l'état des modifications après sauvegarde
window.ppaDataModified = false;
// Afficher une notification de succès
showNotification('PPA modifié avec succès', 'success');
}, 1500);
});
});
});
});
}
// Edit PPA Modal Functions
function initEditPPAButtons() {
// Initialiser les boutons de suppression de PPA
const deleteButtons = document.querySelectorAll('.delete-ppa-btn');
deleteButtons.forEach(button => {
if (!button.hasAttribute('onclick')) {
button.setAttribute('onclick', 'event.stopPropagation(); deletePPA(this)');
}
});
}
// Fonction de suppression de PPA
function deletePPA(button) {
// Récupérer la ligne du tableau correspondante
const row = button.closest('tr');
// Récupérer les informations du PPA
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const date = row.cells[0]?.textContent || new Date().toLocaleDateString('fr-FR');
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Ajouter une animation de fermeture en douceur
deleteConfirmModal.style.transition = 'opacity 0.3s ease';
deleteConfirmModal.style.opacity = '0';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(deleteConfirmModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}, 300);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau définitivement
row.remove();
// Supprimer le modal de confirmation et l'indicateur de chargement
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('PPA supprimé définitivement', 'success');
}, 1000);
});
}
// Initialize PPA buttons on page load
document.addEventListener('DOMContentLoaded', function() {
initEditPPAButtons();
initViewPPAButtons();
// Réinitialiser les boutons PPA après l'ajout d'un nouveau PPA
document.getElementById('savePPABtn')?.addEventListener('click', function() {
setTimeout(() => {
initEditPPAButtons();
initViewPPAButtons();
}, 1000);
});
});
function savePPA() {
const reference = document.getElementById('ppaReference').value;
const armeModel = document.getElementById('ppaArmeModel').value;
const type = document.getElementById('ppaType').value;
const heure = document.getElementById('ppaHeure').value;
const agent = document.getElementById('ppaAgent').value;
const munitions = document.getElementById('ppaMunitions').value;
const testPsy = document.getElementById('ppaTestPsy').value;
const testPsyDate = document.getElementById('ppaTestPsyDate').value;
// Validation
if (!reference || !armeModel || !heure || !agent || !munitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('savePPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let testPsyStatus = '';
let statusClass = '';
if (testPsy === 'valide') {
testPsyStatus = `Validé ${new Date(testPsyDate).toLocaleDateString('fr-FR')}`;
statusClass = 'bg-green-100 text-green-800';
} else if (testPsy === 'invalide') {
testPsyStatus = 'Invalidé';
statusClass = 'bg-red-100 text-red-800';
} else if (testPsy === 'en_cours') {
testPsyStatus = 'En cours';
statusClass = 'bg-yellow-100 text-yellow-800';
} else {
testPsyStatus = 'Non passé';
statusClass = 'bg-gray-100 text-gray-800';
}
// Simulate saving
setTimeout(() => {
const ppaTable = document.querySelector('#ppa table tbody');
const newRow = document.createElement('tr');
newRow.className = 'border-b';
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${new Date().toLocaleDateString('fr-FR')}</td>
<td class="px-4 py-3 text-sm">${reference}</td>
<td class="px-4 py-3 text-sm">${armeModel}</td>
<td class="px-4 py-3 text-sm">${type}</td>
<td class="px-4 py-3 text-sm">${heure}</td>
<td class="px-4 py-3 text-sm">${agent}</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 ${statusClass} rounded-full text-xs">${testPsyStatus}</span>
</td>
<td class="px-4 py-3 text-sm">${munitions} cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
`;
// Add with highlight effect
newRow.classList.add('bg-green-50');
ppaTable.insertBefore(newRow, ppaTable.firstChild);
// Reset form
document.getElementById('ppaReference').value = '';
document.getElementById('ppaArmeModel').value = '';
document.getElementById('ppaType').selectedIndex = 0;
document.getElementById('ppaHeure').value = '';
document.getElementById('ppaAgent').value = '';
document.getElementById('ppaMunitions').value = '';
document.getElementById('ppaTestPsy').selectedIndex = 0;
document.getElementById('ppaTestPsyDate').value = '';
document.getElementById('ppaNotes').value = '';
// Close modal
closeCreatePPAModal();
// Show success notification
showNotification('PPA créé avec succès', 'success');
// Remove highlight effect
setTimeout(() => {
newRow.classList.remove('bg-green-50');
}, 1000);
// Restore button state
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Réinitialiser les boutons de suppression pour le nouveau PPA
setTimeout(() => {
initEditPPAButtons();
}, 100);
}, 800);
}
</script>
<button class="px-3 py-1.5 border border-red-200 text-red-600 rounded-button text-sm whitespace-nowrap hidden flex items-center gap-1 hover:bg-red-50 transition-colors" id="removePhotoBtn">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<input type="file" id="photoInput" accept="image/*" class="hidden">
</div>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<div class="flex gap-3">
<button id="cancelCasierBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="createCasierConfirmBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-add-line"></i>
</div>
Créer le Casier
</button>
</div>
<script>
function openCreateCasierModal() {
const modal = document.getElementById('createCasierModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
// PPA Modal Functions
function openCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
function closeCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
}
// View PPA Modal Functions
function initViewPPAButtons() {
const viewButtons = document.querySelectorAll('.view-ppa-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Récupérer la ligne du tableau correspondante
const row = this.closest('tr');
// Récupérer les informations du PPA
const date = row.cells[0]?.textContent || '';
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const type = row.cells[3]?.textContent || '';
const heure = row.cells[4]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const testPsy = row.cells[6]?.querySelector('span')?.textContent || '';
const testPsyClass = row.cells[6]?.querySelector('span')?.className || '';
const munitions = row.cells[7]?.textContent || '';
const statut = row.cells[8]?.querySelector('span')?.textContent || '';
const statutClass = row.cells[8]?.querySelector('span')?.className || '';
// Créer le modal de visualisation
const viewPPAModal = document.createElement('div');
viewPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
viewPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto animate-fade-in">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails du PPA <span class="text-primary">${reference}</span></h3>
<button id="closeViewPPABtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700" onclick="document.body.removeChild(viewPPAModal); document.body.style.overflow = '';">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations principales -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations principales</h4>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Date d'enregistrement</p>
<p class="font-medium">${date}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Heure</p>
<p class="font-medium">${heure}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Modèle d'arme</p>
<p class="font-medium">${armeModel}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Type</p>
<p class="font-medium">${type}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Agent responsable</p>
<p class="font-medium">${agent}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Munitions autorisées</p>
<p class="font-medium">${munitions}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Test psychologique</p>
<p><span class="${testPsyClass}">${testPsy}</span></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Statut</p>
<p><span class="${statutClass}">${statut}</span></p>
</div>
</div>
</div>
<!-- Historique des modifications -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Historique des modifications</h4>
<div class="space-y-3">
<div class="p-3 bg-white rounded shadow-sm">
<div class="flex justify-between items-center">
<p class="text-sm font-medium">Création du dossier</p>
<p class="text-xs text-gray-500">${date}</p>
</div>
<p class="text-sm text-gray-600 mt-1">Dossier créé par ${agent}</p>
</div>
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p class="text-sm">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</p>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<!-- Bouton supprimé -->
</div>
</div>
`;
document.body.appendChild(viewPPAModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons
document.getElementById('closeViewPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const hasChanges = window.ppaDataModified || false;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.ppaDataModified = false; // Réinitialiser l'état des modifications
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
});
} else {
// Si aucune modification n'a été apportée, fermer directement
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
}
});
// Ajouter un gestionnaire d'événements pour la touche Échap
document.addEventListener('keydown', function(e) {
if (e.key === 'Escape' && document.contains(viewPPAModal)) {
document.getElementById('closeViewPPABtn').click();
}
});
// Ajouter des écouteurs d'événements pour détecter les modifications
const editableFields = editPPAModal.querySelectorAll('input, select, textarea');
editableFields.forEach(field => {
field.addEventListener('change', function() {
window.ppaDataModified = true;
});
field.addEventListener('input', function() {
window.ppaDataModified = true;
});
});
document.getElementById('deletePPABtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(viewPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('printPPABtn').addEventListener('click', function() {
// Simuler l'impression
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Préparation de l'impression...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
showNotification('Document envoyé à l\'imprimante', 'success');
}, 1500);
});
document.getElementById('exportPPABtn').addEventListener('click', function() {
// Créer un menu déroulant pour les options d'exportation
const exportMenu = document.createElement('div');
exportMenu.className = 'absolute bottom-16 right-6 bg-white rounded-lg shadow-xl border border-gray-200 z-50 py-2 w-48 animate-fade-in';
exportMenu.innerHTML = `
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="pdf">
<i class="ri-file-pdf-line text-red-500"></i>
Exporter en PDF
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="excel">
<i class="ri-file-excel-line text-green-500"></i>
Exporter en Excel
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="word">
<i class="ri-file-word-line text-blue-500"></i>
Exporter en Word
</button>
`;
// Ajouter le menu à côté du bouton d'exportation
this.parentNode.appendChild(exportMenu);
// Gérer les clics en dehors du menu pour le fermer
const closeExportMenu = function(e) {
if (!exportMenu.contains(e.target) && e.target !== document.getElementById('exportPPABtn')) {
exportMenu.remove();
document.removeEventListener('click', closeExportMenu);
}
};
// Ajouter un délai pour éviter que le menu ne se ferme immédiatement
setTimeout(() => {
document.addEventListener('click', closeExportMenu);
}, 100);
// Gérer les clics sur les options d'exportation
exportMenu.querySelectorAll('button').forEach(button => {
button.addEventListener('click', function() {
const format = this.dataset.format;
exportMenu.remove();
// Simuler l'exportation
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Exportation en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
// Créer un élément <a> invisible pour déclencher le téléchargement
const link = document.createElement('a');
link.href = '#'; // Dans une application réelle, ce serait l'URL du fichier
if (format === 'pdf') {
link.download = `PPA_${reference}.pdf`;
showNotification('Document exporté en PDF', 'success');
} else if (format === 'excel') {
link.download = `PPA_${reference}.xlsx`;
showNotification('Document exporté en Excel', 'success');
} else if (format === 'word') {
link.download = `PPA_${reference}.docx`;
showNotification('Document exporté en Word', 'success');
}
// Simuler un clic sur le lien pour déclencher le téléchargement
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}, 1500);
});
});
});
// Initialiser les boutons de téléchargement
const downloadButtons = viewPPAModal.querySelectorAll('.download-btn');
downloadButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.stopPropagation();
// Ajouter une classe pour indiquer que le téléchargement est en cours
this.classList.add('text-primary', 'animate-pulse');
// Récupérer le nom du fichier à partir de l'attribut data
const filename = this.dataset.filename;
// Gérer le téléchargement
handleFileDownload(filename);
// Retirer l'animation après un délai
setTimeout(() => {
this.classList.remove('animate-pulse');
}, 2000);
});
});
// Gérer le bouton d'édition
document.getElementById('editPPAFromViewBtn').addEventListener('click', function() {
// Indiquer que des modifications pourraient être apportées
window.ppaDataModified = true;
// Fermer le modal de visualisation
document.body.removeChild(viewPPAModal);
document.body.style.overflow = '';
// Créer un modal d'édition (similaire au modal de création mais pré-rempli)
const editPPAModal = document.createElement('div');
editPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
editPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Modifier le PPA <span class="text-primary">${reference}</span></h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editPPAReference" value="${reference}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="editPPAArmeModel" value="${armeModel}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="editPPAType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme" ${type === 'Permis de port d\'arme' ? 'selected' : ''}>Permis de port d'arme</option>
<option value="Renouvellement" ${type === 'Renouvellement' ? 'selected' : ''}>Renouvellement</option>
<option value="Autorisation temporaire" ${type === 'Autorisation temporaire' ? 'selected' : ''}>Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="editPPAHeure" value="${heure}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="editPPAAgent" value="${agent}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="editPPAMunitions" value="${munitions.replace(' cartouches', '')}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="editPPATestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe" ${testPsy.includes('Non passé') ? 'selected' : ''}>Non passé</option>
<option value="en_cours" ${testPsy.includes('En cours') ? 'selected' : ''}>En cours</option>
<option value="valide" ${testPsy.includes('Validé') ? 'selected' : ''}>Validé</option>
<option value="invalide" ${testPsy.includes('Invalidé') ? 'selected' : ''}>Invalidé</option>
</select>
<input type="date" id="editPPATestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="editPPANotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deletePPAFromEditBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditPPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editPPAModal);
document.body.style.overflow = 'hidden';
// Gérer les événements des boutons
document.getElementById('cancelEditPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
if (window.ppaDataModified) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseEditBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseEditBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
window.ppaDataModified = false; // Réinitialiser l'état des modifications
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
}
});
document.getElementById('deletePPAFromEditBtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(editPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('saveEditPPABtn').addEventListener('click', function() {
// Indiquer que des modifications sont en cours
window.ppaDataModified = true;
// Récupérer les valeurs modifiées
const newReference = document.getElementById('editPPAReference').value;
const newArmeModel = document.getElementById('editPPAArmeModel').value;
const newType = document.getElementById('editPPAType').value;
const newHeure = document.getElementById('editPPAHeure').value;
const newAgent = document.getElementById('editPPAAgent').value;
const newMunitions = document.getElementById('editPPAMunitions').value;
const newTestPsy = document.getElementById('editPPATestPsy').value;
const newTestPsyDate = document.getElementById('editPPATestPsyDate').value;
const newNotes = document.getElementById('editPPANotes').value;
// Validation
if (!newReference || !newArmeModel || !newHeure || !newAgent || !newMunitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('saveEditPPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let newTestPsyStatus = '';
let newStatusClass = '';
if (newTestPsy === 'valide') {
newTestPsyStatus = `Validé ${new Date(newTestPsyDate).toLocaleDateString('fr-FR')}`;
newStatusClass = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
} else if (newTestPsy === 'invalide') {
newTestPsyStatus = 'Invalidé';
newStatusClass = 'px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs';
} else if (newTestPsy === 'en_cours') {
newTestPsyStatus = 'En cours';
newStatusClass = 'px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs';
} else {
newTestPsyStatus = 'Non passé';
newStatusClass = 'px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs';
}
// Simulate saving
setTimeout(() => {
// Mettre à jour la ligne dans le tableau
row.cells[1].textContent = newReference;
row.cells[2].textContent = newArmeModel;
row.cells[3].textContent = newType;
row.cells[4].textContent = newHeure;
row.cells[5].textContent = newAgent;
row.cells[6].innerHTML = `<span class="${newStatusClass}">${newTestPsyStatus}</span>`;
row.cells[7].textContent = `${newMunitions} cartouches`;
// Ajouter un effet de highlight à la ligne modifiée
row.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
row.classList.remove('bg-green-50', 'transition-all');
}, 1500);
// Fermer le modal d'édition
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
// Réinitialiser l'état des modifications après sauvegarde
window.ppaDataModified = false;
// Afficher une notification de succès
showNotification('PPA modifié avec succès', 'success');
}, 1500);
});
});
});
});
}
// Edit PPA Modal Functions
function initEditPPAButtons() {
// Initialiser les boutons de suppression de PPA
const deleteButtons = document.querySelectorAll('.delete-ppa-btn');
deleteButtons.forEach(button => {
if (!button.hasAttribute('onclick')) {
button.setAttribute('onclick', 'event.stopPropagation(); deletePPA(this)');
}
});
}
// Fonction de suppression de PPA
function deletePPA(button) {
// Récupérer la ligne du tableau correspondante
const row = button.closest('tr');
// Récupérer les informations du PPA
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const date = row.cells[0]?.textContent || new Date().toLocaleDateString('fr-FR');
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Ajouter une animation de fermeture en douceur
deleteConfirmModal.style.transition = 'opacity 0.3s ease';
deleteConfirmModal.style.opacity = '0';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(deleteConfirmModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}, 300);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau définitivement
row.remove();
// Supprimer le modal de confirmation et l'indicateur de chargement
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('PPA supprimé définitivement', 'success');
}, 1000);
});
}
// Initialize PPA buttons on page load
document.addEventListener('DOMContentLoaded', function() {
initEditPPAButtons();
initViewPPAButtons();
// Réinitialiser les boutons PPA après l'ajout d'un nouveau PPA
document.getElementById('savePPABtn')?.addEventListener('click', function() {
setTimeout(() => {
initEditPPAButtons();
initViewPPAButtons();
}, 1000);
});
});
function savePPA() {
const reference = document.getElementById('ppaReference').value;
const armeModel = document.getElementById('ppaArmeModel').value;
const type = document.getElementById('ppaType').value;
const heure = document.getElementById('ppaHeure').value;
const agent = document.getElementById('ppaAgent').value;
const munitions = document.getElementById('ppaMunitions').value;
const testPsy = document.getElementById('ppaTestPsy').value;
const testPsyDate = document.getElementById('ppaTestPsyDate').value;
// Validation
if (!reference || !armeModel || !heure || !agent || !munitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('savePPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let testPsyStatus = '';
let statusClass = '';
if (testPsy === 'valide') {
testPsyStatus = `Validé ${new Date(testPsyDate).toLocaleDateString('fr-FR')}`;
statusClass = 'bg-green-100 text-green-800';
} else if (testPsy === 'invalide') {
testPsyStatus = 'Invalidé';
statusClass = 'bg-red-100 text-red-800';
} else if (testPsy === 'en_cours') {
testPsyStatus = 'En cours';
statusClass = 'bg-yellow-100 text-yellow-800';
} else {
testPsyStatus = 'Non passé';
statusClass = 'bg-gray-100 text-gray-800';
}
// Simulate saving
setTimeout(() => {
const ppaTable = document.querySelector('#ppa table tbody');
const newRow = document.createElement('tr');
newRow.className = 'border-b';
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${new Date().toLocaleDateString('fr-FR')}</td>
<td class="px-4 py-3 text-sm">${reference}</td>
<td class="px-4 py-3 text-sm">${armeModel}</td>
<td class="px-4 py-3 text-sm">${type}</td>
<td class="px-4 py-3 text-sm">${heure}</td>
<td class="px-4 py-3 text-sm">${agent}</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 ${statusClass} rounded-full text-xs">${testPsyStatus}</span>
</td>
<td class="px-4 py-3 text-sm">${munitions} cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
`;
// Add with highlight effect
newRow.classList.add('bg-green-50');
ppaTable.insertBefore(newRow, ppaTable.firstChild);
// Reset form
document.getElementById('ppaReference').value = '';
document.getElementById('ppaArmeModel').value = '';
document.getElementById('ppaType').selectedIndex = 0;
document.getElementById('ppaHeure').value = '';
document.getElementById('ppaAgent').value = '';
document.getElementById('ppaMunitions').value = '';
document.getElementById('ppaTestPsy').selectedIndex = 0;
document.getElementById('ppaTestPsyDate').value = '';
document.getElementById('ppaNotes').value = '';
// Close modal
closeCreatePPAModal();
// Show success notification
showNotification('PPA créé avec succès', 'success');
// Remove highlight effect
setTimeout(() => {
newRow.classList.remove('bg-green-50');
}, 1000);
// Restore button state
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Réinitialiser les boutons de suppression pour le nouveau PPA
setTimeout(() => {
initEditPPAButtons();
}, 100);
}, 800);
}
</script>
</div>
</div>
</div>
<!-- Create Depense Modal -->
<div id="createDepenseModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Ajouter une Nouvelle Dépense</h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
<input type="date" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Catégorie</label>
<div class="relative">
<select class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="">Sélectionner une catégorie</option>
<option value="fournitures">Fournitures</option>
<option value="transport">Transport</option>
<option value="equipement">Équipement</option>
<option value="communication">Communication</option>
<option value="formation">Formation</option>
<option value="autre">Autre</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Montant (€)</label>
<input type="number" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Méthode de paiement</label>
<div class="relative">
<select class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="">Sélectionner</option>
<option value="carte">Carte bancaire</option>
<option value="especes">Espèces</option>
<option value="virement">Virement</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3"></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDepenseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Enregistrer
</button>
</div>
</div>
</div>
<!-- Create Amende Modal -->
<div id="createAmendeModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Créer une Nouvelle Amende</h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
<input type="date" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="AMN-2025-XXXX">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Personne concernée</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Nom et prénom">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Montant (€)</label>
<input type="number" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
<div class="relative">
<select class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="">Sélectionner un statut</option>
<option value="en_attente">En attente</option>
<option value="payee">Payée</option>
<option value="impayee">Impayée</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type d'infraction</label>
<div class="relative">
<select class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="">Sélectionner un type</option>
<option value="stationnement">Stationnement interdit</option>
<option value="vitesse">Excès de vitesse</option>
<option value="telephone">Téléphone au volant</option>
<option value="alcool">Alcoolémie</option>
<option value="autre">Autre</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Lieu de l'infraction</label>
<input type="text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Adresse complète">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
<textarea class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3" placeholder="Informations complémentaires..."></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelAmendeBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveAmendeBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Enregistrer
</button>
</div>
</div>
</div>
<!-- View Amende Modal -->
<div id="viewAmendeModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails de l'Amende <span id="amendeRef" class="text-primary"></span></h3>
<button id="closeViewAmendeBtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations principales -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations principales</h4>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Date de l'infraction</p>
<p class="font-medium" id="amendeDate"></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Statut</p>
<p id="amendeStatutContainer"></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Montant</p>
<p class="font-medium" id="amendeMontant"></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Type d'infraction</p>
<p class="font-medium" id="amendeType"></p>
</div>
<div class="col-span-2">
<p class="text-sm text-gray-500 mb-1">Lieu de l'infraction</p>
<p class="font-medium" id="amendeLieu"></p>
</div>
</div>
</div>
<!-- Informations du contrevenant -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations du contrevenant</h4>
<div>
<p class="text-sm text-gray-500 mb-1">Nom complet</p>
<p class="font-medium" id="amendePersonne"></p>
</div>
<!-- Historique des paiements -->
<div class="bg-gray-50 p-4 rounded">
<h4 class="font-medium text-lg mb-4">Historique des paiements</h4>
<div id="paiementHistorique">
<!-- Contenu dynamique selon le statut -->
</div>
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p id="amendeNotes" class="text-sm"></p>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<div>
<button id="editAmendeFromViewBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-edit-line"></i>
</div>
Modifier
</button>
</div>
<div class="flex gap-3">
</div>
</div>
</div>
</div>
</div>
</main>
</div>
<script>
// Timer functionality
let timerRunning = false;
let timerInterval;
let seconds = 0;
let minutes = 0;
let hours = 0;
let startTime = null;
const timerBtn = document.getElementById('timerBtn');
const timerDisplay = document.getElementById('timer');
const saveTimerBtn = document.getElementById('saveTimerBtn');
function formatTime(hours, minutes, seconds) {
return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}
function formatTimeFromSeconds(totalSeconds) {
const hours = Math.floor(totalSeconds / 3600);
const minutes = Math.floor((totalSeconds % 3600) / 60);
const seconds = totalSeconds % 60;
return formatTime(hours, minutes, seconds);
}
function addTimerRecord(startTime, duration) {
const tbody = document.getElementById('timerHistoryBody');
const row = document.createElement('tr');
row.className = 'border-b';
const startDate = new Date(startTime);
const formattedDate = `${String(startDate.getDate()).padStart(2, '0')}/${String(startDate.getMonth() + 1).padStart(2, '0')}/${startDate.getFullYear()}`;
const formattedTime = `${String(startDate.getHours()).padStart(2, '0')}:${String(startDate.getMinutes()).padStart(2, '0')}`;
row.innerHTML = `
<td class="px-4 py-3 text-sm">${formattedDate}</td>
<td class="px-4 py-3 text-sm">${formattedTime}</td>
<td class="px-4 py-3 text-sm">${duration}</td>
<td class="px-4 py-3 text-sm">
<button class="delete-timer-btn w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500">
<i class="ri-delete-bin-line"></i>
</button>
</td>
`;
tbody.insertBefore(row, tbody.firstChild);
// Ajouter l'événement de suppression
const deleteBtn = row.querySelector('.delete-timer-btn');
deleteBtn.addEventListener('click', function() {
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment supprimer cet enregistrement de temps ?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button class="cancel-delete-btn px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button class="confirm-delete-btn px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Supprimer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
confirmDialog.querySelector('.cancel-delete-btn').addEventListener('click', () => {
document.body.removeChild(confirmDialog);
});
confirmDialog.querySelector('.confirm-delete-btn').addEventListener('click', () => {
row.remove();
document.body.removeChild(confirmDialog);
showNotification('Enregistrement supprimé avec succès', 'success');
});
});
}
function deleteTimerRecord(button) {
const row = button.closest('tr');
// Créer le modal de confirmation
const confirmationModal = document.createElement('div');
confirmationModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
confirmationModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation de suppression</h3>
<p class="text-gray-600">Êtes-vous sûr de vouloir supprimer cet enregistrement ?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button class="cancel-btn px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button class="confirm-btn px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Supprimer
</button>
</div>
</div>
`;
document.body.appendChild(confirmationModal);
// Gérer les boutons du modal
const cancelBtn = confirmationModal.querySelector('.cancel-btn');
const confirmBtn = confirmationModal.querySelector('.confirm-btn');
cancelBtn.addEventListener('click', () => {
document.body.removeChild(confirmationModal);
});
confirmBtn.addEventListener('click', () => {
// Remplacer la ligne par un indicateur de chargement
row.style.backgroundColor = '#f3f4f6';
row.style.transition = 'all 0.3s';
row.innerHTML = `
<td colspan="4" class="px-4 py-3 text-sm text-center">
<div class="flex items-center justify-center gap-2">
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
<span>Suppression en cours...</span>
</div>
</td>
`;
// Simuler un délai de traitement
setTimeout(() => {
// Animation de sortie
row.style.opacity = '0';
row.style.transform = 'translateX(-20px)';
setTimeout(() => {
row.remove();
showNotification('Enregistrement supprimé avec succès', 'success');
}, 300);
document.body.removeChild(confirmationModal);
}, 800);
});
}
function handleTimerClick() {
if (timerRunning) {
clearInterval(timerInterval);
timerBtn.innerHTML = '<i class="ri-play-fill ri-lg"></i>';
// Stop the timer and add record
const duration = formatTime(hours, minutes, seconds);
if (startTime) {
addTimerRecord(startTime, duration);
}
// Reset timer
seconds = 0;
minutes = 0;
hours = 0;
timerDisplay.textContent = '00:00:00';
startTime = null;
} else {
startTime = new Date();
const now = startTime;
document.getElementById('timerStartTime').textContent =
`${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
timerInterval = setInterval(updateTimer, 1000);
timerBtn.innerHTML = '<i class="ri-pause-fill ri-lg"></i>';
}
timerRunning = !timerRunning;
}
saveTimerBtn.addEventListener('click', function() {
if (hours === 0 && minutes === 0 && seconds === 0) {
showNotification('Aucun temps à enregistrer', 'error');
return;
}
// Change button appearance to indicate saving
const originalContent = saveTimerBtn.innerHTML;
saveTimerBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveTimerBtn.disabled = true;
saveTimerBtn.classList.add('opacity-75');
// Simulate saving process with delay
setTimeout(() => {
const duration = formatTime(hours, minutes, seconds);
addTimerRecord(startTime || new Date(), duration);
// Réinitialiser le chronomètre
clearInterval(timerInterval);
seconds = 0;
minutes = 0;
hours = 0;
timerDisplay.textContent = '00:00:00';
timerBtn.innerHTML = '<i class="ri-play-fill ri-lg"></i>';
timerRunning = false;
startTime = null;
// Restore button appearance
saveTimerBtn.innerHTML = originalContent;
saveTimerBtn.disabled = false;
saveTimerBtn.classList.remove('opacity-75');
showNotification('Temps enregistré avec succès', 'success');
}, 800);
});
// Timer Tabs Functionality
document.querySelectorAll('.timer-tab').forEach(tab => {
tab.addEventListener('click', function() {
document.querySelectorAll('.timer-tab').forEach(t => {
t.classList.remove('tab-active');
t.classList.add('text-gray-500');
});
this.classList.add('tab-active');
this.classList.remove('text-gray-500');
});
});
// Update timer start time
timerBtn.addEventListener('click', function() {
if (!timerRunning) {
const now = new Date();
document.getElementById('timerStartTime').textContent =
`${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
}
});
function updateTimer() {
seconds++;
if (seconds >= 60) {
seconds = 0;
minutes++;
if (minutes >= 60) {
minutes = 0;
hours++;
}
}
timerDisplay.textContent =
(hours < 10 ? "0" + hours : hours) + ":" +
(minutes < 10 ? "0" + minutes : minutes) + ":" +
(seconds < 10 ? "0" + seconds : seconds);
}
// Edit Casier functionality
const editCasierModal = document.getElementById('editCasierModal');
const editCasierId = document.getElementById('editCasierId');
const editCasierNom = document.getElementById('editCasierNom');
const editCasierTelephone = document.getElementById('editCasierTelephone');
const editCasierProfession = document.getElementById('editCasierProfession');
const editCasierNaissance = document.getElementById('editCasierNaissance');
const editCasierAdresse = document.getElementById('editCasierAdresse');
const editCasierPeine = document.getElementById('editCasierPeine');
const editCasierNotes = document.getElementById('editCasierNotes');
const cancelEditCasierBtn = document.getElementById('cancelEditCasierBtn');
const saveEditCasierBtn = document.getElementById('saveEditCasierBtn');
const photoInput = document.getElementById('photoInput');
const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');
const removePhotoBtn = document.getElementById('removePhotoBtn');
const photoPreview = document.getElementById('photoPreview');
// Initialize edit casier buttons
document.addEventListener('DOMContentLoaded', function() {
initEditCasierButtons();
initPhotoUpload();
initDeleteCasierButton();
initCreateCasierModal();
loadSavedCasiers();
initPasswordFunctions();
});
function showChangePasswordModal() {
const modal = document.getElementById('changePasswordModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
function initPasswordFunctions() {
// Handle password visibility toggle
const toggleButtons = document.querySelectorAll('.toggle-password');
toggleButtons.forEach(button => {
button.addEventListener('click', function() {
const input = this.parentElement.querySelector('input');
const icon = this.querySelector('i');
if (input.type === 'password') {
input.type = 'text';
icon.classList.remove('ri-eye-off-line');
icon.classList.add('ri-eye-line');
} else {
input.type = 'password';
icon.classList.remove('ri-eye-line');
icon.classList.add('ri-eye-off-line');
}
});
});
// Handle modal close
document.getElementById('cancelChangePasswordBtn').addEventListener('click', function() {
const modal = document.getElementById('changePasswordModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
// Reset form
document.getElementById('changePasswordForm').reset();
});
// Handle password change
document.getElementById('saveNewPasswordBtn').addEventListener('click', function() {
const currentPassword = document.getElementById('currentPassword').value;
const newPassword = document.getElementById('newPassword').value;
const confirmPassword = document.getElementById('confirmPassword').value;
// Validation
if (!currentPassword || !newPassword || !confirmPassword) {
showNotification('Veuillez remplir tous les champs', 'error');
return;
}
if (newPassword !== confirmPassword) {
showNotification('Les nouveaux mots de passe ne correspondent pas', 'error');
return;
}
// Password strength validation
const hasMinLength = newPassword.length >= 8;
const hasNumber = /\d/.test(newPassword);
const hasSpecial = /[!@#$%^&*(),.?":{}|<>]/.test(newPassword);
if (!hasMinLength || !hasNumber || !hasSpecial) {
showNotification('Le nouveau mot de passe ne respecte pas les critères de sécurité', 'error');
return;
}
// Show loading state
const button = this;
const originalContent = button.innerHTML;
button.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
button.disabled = true;
// Simulate saving (replace with actual API call)
setTimeout(() => {
// Success scenario
const modal = document.getElementById('changePasswordModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
// Reset form
document.getElementById('changePasswordForm').reset();
// Reset button state
button.innerHTML = originalContent;
button.disabled = false;
showNotification('Mot de passe modifié avec succès', 'success');
}, 1000);
});
}
// Function to initialize delete casier button
function initDeleteCasierButton() {
document.getElementById('deleteCasierBtn').addEventListener('click', function() {
const id = editCasierId.textContent;
const nom = editCasierNom.value;
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce casier ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${nom}</p>
<p class="text-sm text-gray-600">Dossier #${id}</p>
</div>
<p class="text-sm text-red-600">Cette action est irréversible.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeleteCasierBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmDeleteCasierBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeleteCasierBtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeleteCasierBtn').addEventListener('click', function() {
// Supprimer le modal de confirmation
document.body.removeChild(deleteConfirmModal);
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Trouver et supprimer la carte du casier
const editButtons = document.querySelectorAll('.edit-casier-btn');
editButtons.forEach(button => {
if (button.dataset.id === id) {
const card = button.closest('.bg-white.rounded.shadow-sm');
if (card) {
card.remove();
}
}
});
// Supprimer le modal d'édition et l'indicateur de chargement
editCasierModal.classList.add('hidden');
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Casier supprimé avec succès', 'success');
// Sauvegarder automatiquement les casiers après suppression
saveCasiers();
}, 1000);
});
});
}
// Function to load saved casiers data
function loadSavedCasiers() {
const savedCasiers = localStorage.getItem('casiersData');
if (savedCasiers) {
try {
const casiersData = JSON.parse(savedCasiers);
console.log('Casiers data loaded from localStorage:', casiersData.length, 'records');
} catch (e) {
console.error('Error parsing saved casiers data:', e);
}
}
}
// Photo upload functionality
function initPhotoUpload() {
// Handle upload button click
uploadPhotoBtn.addEventListener('click', function() {
photoInput.click();
});
// Handle file selection
photoInput.addEventListener('change', function(e) {
if (this.files && this.files[0]) {
const file = this.files[0];
// Check if file is an image
if (!file.type.match('image.*')) {
showNotification('Veuillez sélectionner une image valide', 'error');
return;
}
// Check file size (max 5MB)
if (file.size > 5 * 1024 * 1024) {
showNotification('L\'image est trop volumineuse (max 5MB)', 'error');
return;
}
// Show loading indicator in preview
photoPreview.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>';
const reader = new FileReader();
reader.onload = function(e) {
// Clear the preview and add the image
photoPreview.innerHTML = '';
const img = document.createElement('img');
img.src = e.target.result;
img.className = 'w-full h-full object-cover rounded-full';
photoPreview.appendChild(img);
// Show remove button
removePhotoBtn.classList.remove('hidden');
// Show success notification
showNotification('Photo téléchargée avec succès', 'success');
};
reader.onerror = function() {
// Reset the preview on error
photoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
showNotification('Erreur lors du téléchargement de l\'image', 'error');
};
reader.readAsDataURL(file);
}
});
// Handle remove button click
removePhotoBtn.addEventListener('click', function() {
// Reset the file input
photoInput.value = '';
// Reset the preview with animation
photoPreview.classList.add('opacity-50');
setTimeout(() => {
photoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
photoPreview.classList.remove('opacity-50');
}, 200);
// Hide remove button
removePhotoBtn.classList.add('hidden');
// Show notification
showNotification('Photo supprimée', 'success');
});
}
function initEditCasierButtons() {
const editButtons = document.querySelectorAll('.edit-casier-btn');
editButtons.forEach(button => {
button.addEventListener('click', function() {
// Get data from button attributes
const id = this.dataset.id;
const nom = this.dataset.nom;
const telephone = this.dataset.telephone;
const profession = this.dataset.profession;
const adresse = this.dataset.adresse;
const notes = this.dataset.notes;
const naissance = this.dataset.naissance;
const peine = this.dataset.peine || '';
// Fill the modal with data
editCasierId.textContent = id;
editCasierNom.value = nom;
editCasierTelephone.value = telephone;
editCasierProfession.value = profession;
editCasierNaissance.value = naissance;
editCasierAdresse.value = adresse;
editCasierPeine.value = peine;
editCasierNotes.value = notes;
// Show the modal
editCasierModal.classList.remove('hidden');
document.body.style.overflow = 'hidden'; // Prevent background scrolling
});
});
}
// Cancel button event
cancelEditCasierBtn.addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const id = editCasierId.textContent;
const editButtons = document.querySelectorAll('.edit-casier-btn');
let originalNom = '';
let originalTelephone = '';
let originalProfession = '';
let originalAdresse = '';
let originalPeine = '';
let originalNotes = '';
let originalNaissance = '';
// Trouver les valeurs originales
editButtons.forEach(button => {
if (button.dataset.id === id) {
originalNom = button.dataset.nom;
originalTelephone = button.dataset.telephone;
originalProfession = button.dataset.profession;
originalAdresse = button.dataset.adresse;
originalPeine = button.dataset.peine || '';
originalNotes = button.dataset.notes || '';
originalNaissance = button.dataset.naissance || '';
}
});
// Vérifier si des modifications ont été apportées
const hasChanges =
originalNom !== editCasierNom.value ||
originalTelephone !== editCasierTelephone.value ||
originalProfession !== editCasierProfession.value ||
originalAdresse !== editCasierAdresse.value ||
originalPeine !== editCasierPeine.value ||
originalNotes !== editCasierNotes.value ||
originalNaissance !== editCasierNaissance.value;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
editCasierModal.classList.add('hidden');
document.body.style.overflow = ''; // Rétablir le défilement de la page
});
} else {
// Si aucune modification n'a été apportée, fermer directement
editCasierModal.classList.add('hidden');
document.body.style.overflow = ''; // Restore scrolling
}
});
// Save button event
saveEditCasierBtn.addEventListener('click', function() {
// Validate required fields
let isValid = true;
const requiredFields = [editCasierNom, editCasierTelephone, editCasierAdresse];
requiredFields.forEach(field => {
if (!field.value.trim()) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance to indicate saving
const originalContent = saveEditCasierBtn.innerHTML;
saveEditCasierBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveEditCasierBtn.disabled = true;
saveEditCasierBtn.classList.add('opacity-75');
// Get the updated values
const id = editCasierId.textContent;
const nom = editCasierNom.value;
const telephone = editCasierTelephone.value;
const profession = editCasierProfession.value;
const adresse = editCasierAdresse.value;
const peine = editCasierPeine.value;
const notes = editCasierNotes.value;
const naissance = editCasierNaissance.value;
// Simulate saving (in a real app, this would be an API call)
setTimeout(() => {
// Simuler une chance d'échec (10%)
const saveSuccess = Math.random() > 0.1;
if (saveSuccess) {
// Find the casier card that was edited
const editButtons = document.querySelectorAll('.edit-casier-btn');
editButtons.forEach(button => {
if (button.dataset.id === id) {
// Update the button's data attributes
button.dataset.nom = nom;
button.dataset.telephone = telephone;
button.dataset.profession = profession;
button.dataset.adresse = adresse;
button.dataset.peine = peine;
button.dataset.notes = notes;
button.dataset.naissance = naissance;
// Update the displayed information in the card
const card = button.closest('.bg-white.rounded.shadow-sm');
if (card) {
// Update name
const nameElement = card.querySelector('h3.font-semibold');
if (nameElement) nameElement.textContent = nom;
// Update phone
const phoneElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Téléphone") + p.text-sm');
if (phoneElement) phoneElement.textContent = telephone;
// Update profession
const professionElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Profession") + p.text-sm');
if (professionElement) professionElement.textContent = profession;
// Update address
const addressElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Adresse") + p.text-sm');
if (addressElement) addressElement.textContent = adresse;
// Update notes
const notesElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Notes") + p.text-sm');
if (notesElement) notesElement.textContent = notes;
}
}
});
// Restore button appearance
saveEditCasierBtn.innerHTML = originalContent;
saveEditCasierBtn.disabled = false;
saveEditCasierBtn.classList.remove('opacity-75');
// Close the modal
editCasierModal.classList.add('hidden');
document.body.style.overflow = ''; // Restore scrolling
// Show success notification
showNotification('Casier modifié avec succès', 'success');
// Automatically save all casiers after modification
saveCasiers();
// Brief highlight effect on the edited card to indicate success
editButtons.forEach(button => {
if (button.dataset.id === id) {
const card = button.closest('.bg-white.rounded.shadow-sm');
if (card) {
card.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
setTimeout(() => {
card.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
}, 1000);
}
}
});
} else {
// Restaurer l'apparence du bouton
saveEditCasierBtn.innerHTML = originalContent;
saveEditCasierBtn.disabled = false;
saveEditCasierBtn.classList.remove('opacity-75');
// Afficher une notification d'erreur
showNotification('Erreur lors de la sauvegarde: Problème de connexion au serveur. Veuillez réessayer.', 'error');
}
}, 800);
});
// Helper function to find elements by text content
document.querySelectorAll = (function(originalQsa) {
return function(selector) {
if (selector.includes(':contains(')) {
const match = selector.match(/:contains\("([^"]+)"\)/);
if (match) {
const text = match[1];
const newSelector = selector.replace(/:contains\("[^"]+"\)/, '');
const elements = originalQsa.call(this, newSelector);
return Array.from(elements).filter(el => el.textContent.includes(text));
}
}
return originalQsa.call(this, selector);
};
})(document.querySelectorAll);
// Navigation between main sections
const paperasseBtn = document.getElementById('paperasseBtn');
const travailBtn = document.getElementById('travailBtn');
const paperasseSection = document.getElementById('paperasseSection');
const travailSection = document.getElementById('travailSection');
paperasseBtn.addEventListener('click', function() {
paperasseSection.classList.remove('hidden');
travailSection.classList.add('hidden');
paperasseBtn.classList.add('tab-active');
paperasseBtn.classList.remove('text-gray-500');
travailBtn.classList.remove('tab-active');
travailBtn.classList.add('text-gray-500');
});
travailBtn.addEventListener('click', function() {
paperasseSection.classList.add('hidden');
travailSection.classList.remove('hidden');
travailBtn.classList.add('tab-active');
travailBtn.classList.remove('text-gray-500');
paperasseBtn.classList.remove('tab-active');
paperasseBtn.classList.add('text-gray-500');
});
// Initialiser la section Travail (Casiers) comme active par défaut
document.addEventListener('DOMContentLoaded', function() {
// Mettre à jour les classes des boutons de navigation
travailBtn.classList.add('tab-active');
travailBtn.classList.remove('text-gray-500');
paperasseBtn.classList.remove('tab-active');
paperasseBtn.classList.add('text-gray-500');
});
// Paperasse sub-navigation
const paperasseTabs = document.querySelectorAll('.paperasse-tab');
const paperasseContents = document.querySelectorAll('.paperasse-content');
paperasseTabs.forEach(tab => {
tab.addEventListener('click', function() {
const target = this.dataset.target;
// Hide all contents
paperasseContents.forEach(content => {
content.classList.add('hidden');
});
// Show target content
document.getElementById(target).classList.remove('hidden');
// Update tab styles
paperasseTabs.forEach(t => {
t.classList.remove('tab-active');
t.classList.add('text-gray-500');
});
this.classList.add('tab-active');
this.classList.remove('text-gray-500');
});
});
// Notes save functionality
const saveNotesBtn = document.getElementById('saveNotesBtn');
const notesTextarea = document.getElementById('notesTextarea');
saveNotesBtn.addEventListener('click', function() {
// Change button appearance to indicate saving
const originalContent = saveNotesBtn.innerHTML;
saveNotesBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveNotesBtn.disabled = true;
saveNotesBtn.classList.add('opacity-75');
// Get the notes content
const notesContent = notesTextarea.value;
// Simulate saving process
setTimeout(() => {
// Store in localStorage (in a real app, this would be a server request)
localStorage.setItem('savedNotes', notesContent);
// Restore button appearance
saveNotesBtn.innerHTML = originalContent;
saveNotesBtn.disabled = false;
saveNotesBtn.classList.remove('opacity-75');
// Show success notification
showNotification('Notes sauvegardées avec succès', 'success');
// Brief highlight effect on the textarea to indicate success
notesTextarea.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50');
setTimeout(() => {
notesTextarea.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50');
}, 1000);
}, 800);
});
// Load saved notes on page load
document.addEventListener('DOMContentLoaded', function() {
const savedNotes = localStorage.getItem('savedNotes');
if (savedNotes) {
notesTextarea.value = savedNotes;
}
});
// Casier Modal
const createCasierBtn = document.getElementById('createCasierBtn');
const cancelCasierBtn = document.getElementById('cancelCasierBtn');
const createCasierModal = document.getElementById('createCasierModal');
const createCasierConfirmBtn = document.getElementById('createCasierConfirmBtn');
const createPhotoInput = document.getElementById('photoInput');
const createUploadPhotoBtn = document.getElementById('uploadPhotoBtn');
const createRemovePhotoBtn = document.getElementById('removePhotoBtn');
const createPhotoPreview = document.getElementById('photoPreview');
const saveCasiersBtn = document.getElementById('saveCasiersBtn');
createCasierBtn.addEventListener('click', function() {
createCasierModal.classList.remove('hidden');
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Initialize photo upload for create modal
initCreatePhotoUpload();
});
// Photo upload functionality for create modal
function initCreatePhotoUpload() {
// Handle upload button click
createUploadPhotoBtn.addEventListener('click', function() {
createPhotoInput.click();
});
// Handle file selection
createPhotoInput.addEventListener('change', function(e) {
if (this.files && this.files[0]) {
const file = this.files[0];
// Check if file is an image
if (!file.type.match('image.*')) {
showNotification('Veuillez sélectionner une image valide', 'error');
return;
}
// Check file size (max 5MB)
if (file.size > 5 * 1024 * 1024) {
showNotification('L\'image est trop volumineuse (max 5MB)', 'error');
return;
}
// Show loading indicator in preview
createPhotoPreview.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>';
const reader = new FileReader();
reader.onload = function(e) {
// Clear the preview and add the image
createPhotoPreview.innerHTML = '';
const img = document.createElement('img');
img.src = e.target.result;
img.className = 'w-full h-full object-cover rounded-full';
createPhotoPreview.appendChild(img);
// Show remove button
createRemovePhotoBtn.classList.remove('hidden');
// Show success notification
showNotification('Photo téléchargée avec succès', 'success');
};
reader.onerror = function() {
// Reset the preview on error
createPhotoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
showNotification('Erreur lors du téléchargement de l\'image', 'error');
};
reader.readAsDataURL(file);
}
});
// Handle remove button click
createRemovePhotoBtn.addEventListener('click', function() {
// Reset the file input
createPhotoInput.value = '';
// Reset the preview with animation
createPhotoPreview.classList.add('opacity-50');
setTimeout(() => {
createPhotoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
createPhotoPreview.classList.remove('opacity-50');
}, 200);
// Hide remove button
createRemovePhotoBtn.classList.add('hidden');
// Show notification
showNotification('Photo supprimée', 'success');
});
}
cancelCasierBtn.addEventListener('click', function() {
createCasierModal.classList.add('hidden');
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Reset photo preview
createPhotoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
createRemovePhotoBtn.classList.add('hidden');
createPhotoInput.value = '';
});
createCasierConfirmBtn.addEventListener('click', function() {
// Récupérer les valeurs du formulaire
const nomInput = createCasierModal.querySelector('input[type="text"]:nth-of-type(1)');
const telephoneInput = createCasierModal.querySelector('input[type="tel"]');
const professionInput = createCasierModal.querySelector('input[type="text"]:nth-of-type(2)');
const naissanceInput = createCasierModal.querySelector('input[type="date"]');
const adresseInput = createCasierModal.querySelector('input[type="text"]:nth-of-type(3)');
const peineTextarea = createCasierModal.querySelector('textarea:nth-of-type(1)');
const notesTextarea = createCasierModal.querySelector('textarea:nth-of-type(2)');
// Validation des champs obligatoires
let isValid = true;
const requiredFields = [nomInput, telephoneInput, adresseInput];
requiredFields.forEach(field => {
if (!field.value.trim()) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance to indicate saving
const originalContent = createCasierConfirmBtn.innerHTML;
createCasierConfirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
createCasierConfirmBtn.disabled = true;
createCasierConfirmBtn.classList.add('opacity-75');
// Simuler un délai de traitement
setTimeout(() => {
// Générer un nouvel ID de casier
const newId = `2025-${Math.floor(1000 + Math.random() * 9000)}`;
// Créer un nouveau casier
const casiersGrid = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3.gap-6');
const newCasier = document.createElement('div');
newCasier.className = 'bg-white rounded shadow-sm overflow-hidden';
// Vérifier si une photo a été téléchargée
let photoContent = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
if (createPhotoPreview.querySelector('img')) {
photoContent = createPhotoPreview.innerHTML;
}
// Formater le contenu des peines
let peineContent = '• Aucune peine enregistrée';
if (peineTextarea.value && peineTextarea.value.trim() !== '') {
peineContent = peineTextarea.value
.split('\n')
.filter(line => line.trim() !== '')
.map(line => `• ${line}`)
.join('<br>');
}
newCasier.innerHTML = `
<div class="p-4 border-b">
<div class="flex items-center gap-4">
<div class="w-16 h-16 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center">
${photoContent}
</div>
<div>
<h3 class="font-semibold">${nomInput.value}</h3>
<p class="text-sm text-gray-500">Dossier #${newId}</p>
</div>
</div>
</div>
<div class="p-4">
<div class="grid grid-cols-2 gap-4 mb-4">
<div>
<p class="text-xs text-gray-500 mb-1">Téléphone</p>
<p class="text-sm">${telephoneInput.value}</p>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Profession</p>
<p class="text-sm">${professionInput.value || 'Non spécifiée'}</p>
</div>
<div class="col-span-2">
<p class="text-xs text-gray-500 mb-1">Adresse</p>
<p class="text-sm">${adresseInput.value}</p>
</div>
</div>
<div class="mb-4">
<p class="text-xs text-gray-500 mb-1">Peines</p>
<div class="bg-gray-50 p-2 rounded text-sm">
${peineContent}
</div>
</div>
<div>
<p class="text-xs text-gray-500 mb-1">Notes</p>
<p class="text-sm">${notesTextarea.value || 'Aucune note'}</p>
</div>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-2">
<button class="px-3 py-1.5 border border-gray-300 rounded-button text-sm whitespace-nowrap edit-casier-btn"
data-id="${newId}"
data-nom="${nomInput.value}"
data-telephone="${telephoneInput.value}"
data-profession="${professionInput.value || ''}"
data-adresse="${adresseInput.value}"
data-peine="${peineTextarea.value || ''}"
data-notes="${notesTextarea.value || ''}"
data-naissance="${naissanceInput.value || ''}">
Modifier
</button>
</div>
`;
// Ajouter le nouveau casier au début de la grille avec effet de highlight
newCasier.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
casiersGrid.prepend(newCasier);
// Réinitialiser le formulaire
nomInput.value = '';
telephoneInput.value = '';
professionInput.value = '';
naissanceInput.value = '';
adresseInput.value = '';
peineTextarea.value = '';
notesTextarea.value = '';
createPhotoPreview.innerHTML = '<i class="ri-user-fill ri-xl text-gray-400"></i>';
createRemovePhotoBtn.classList.add('hidden');
createPhotoInput.value = '';
// Restore button appearance
createCasierConfirmBtn.innerHTML = originalContent;
createCasierConfirmBtn.disabled = false;
createCasierConfirmBtn.classList.remove('opacity-75');
// Fermer le modal
createCasierModal.classList.add('hidden');
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Casier créé avec succès', 'success');
// Réinitialiser les événements sur le nouveau bouton d'édition
initEditCasierButtons();
// Sauvegarder automatiquement les casiers après création
saveCasiers();
// Retirer l'effet de highlight après un délai
setTimeout(() => {
newCasier.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
}, 1000);
}, 800);
});
// Depense Modal
const createDepenseBtn = document.getElementById('createDepenseBtn');
const cancelDepenseBtn = document.getElementById('cancelDepenseBtn');
const createDepenseModal = document.getElementById('createDepenseModal');
createDepenseBtn.addEventListener('click', function() {
createDepenseModal.classList.remove('hidden');
});
cancelDepenseBtn.addEventListener('click', function() {
createDepenseModal.classList.add('hidden');
});
// Amende Modal
const createAmendeBtn = document.getElementById('createAmendeBtn');
const cancelAmendeBtn = document.getElementById('cancelAmendeBtn');
const saveAmendeBtn = document.getElementById('saveAmendeBtn');
const createAmendeModal = document.getElementById('createAmendeModal');
createAmendeBtn.addEventListener('click', function(e) {
e.preventDefault(); // Empêcher le comportement par défaut
createAmendeModal.classList.remove('hidden'); // Affiche immédiatement le modal sans changer de page
document.body.style.overflow = 'hidden'; // Empêche le défilement de la page en arrière-plan
});
cancelAmendeBtn.addEventListener('click', function() {
createAmendeModal.classList.add('hidden');
document.body.style.overflow = ''; // Rétablit le défilement de la page
});
const saveDepenseBtn = document.querySelector('#createDepenseModal .bg-primary');
saveDepenseBtn.addEventListener('click', function() {
// Récupérer les champs du formulaire pour la dépense
const dateInput = createDepenseModal.querySelector('input[type="date"]');
const categorieSelect = createDepenseModal.querySelector('select:first-of-type');
const descriptionInput = createDepenseModal.querySelector('input[type="text"]:nth-of-type(1)');
const montantInput = createDepenseModal.querySelector('input[type="number"]');
const methodePaiementSelect = createDepenseModal.querySelector('select:last-of-type');
// Validation
let isValid = true;
[dateInput, descriptionInput, montantInput].forEach(field => {
if (!field.value) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const originalContent = saveDepenseBtn.innerHTML;
saveDepenseBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveDepenseBtn.disabled = true;
saveDepenseBtn.classList.add('opacity-75');
// Format date for display
const date = new Date(dateInput.value);
const formattedDate = `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
// Simuler un délai d'enregistrement
setTimeout(() => {
// Ajouter la nouvelle dépense au tableau
const depensesTable = document.querySelector('#depenses table tbody');
const newRow = document.createElement('tr');
newRow.className = 'border-b';
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${formattedDate}</td>
<td class="px-4 py-3 text-sm">${categorieSelect.value}</td>
<td class="px-4 py-3 text-sm">${descriptionInput.value}</td>
<td class="px-4 py-3 text-sm">${montantInput.value} €</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-depense-btn">
<i class="ri-edit-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 supprimerModified" onclick="confirmDeleteDepense(this)">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
`;
// Add with highlight effect
newRow.classList.add('bg-green-50');
depensesTable.insertBefore(newRow, depensesTable.firstChild);
// Reset form
dateInput.value = '';
descriptionInput.value = '';
montantInput.value = '';
methodePaiementSelect.selectedIndex = 0;
categorieSelect.selectedIndex = 0;
// Close modal
createDepenseModal.classList.add('hidden');
// Show success notification
showNotification('Dépense ajoutée avec succès', 'success');
// Remove highlight effect
setTimeout(() => {
newRow.classList.remove('bg-green-50');
}, 1000);
// Restore button state
saveDepenseBtn.innerHTML = originalContent;
saveDepenseBtn.disabled = false;
saveDepenseBtn.classList.remove('opacity-75');
// Réinitialiser les événements sur les boutons
initEditDepenseButtons();
}, 800);
});
saveAmendeBtn.addEventListener('click', function() {
// Récupérer les champs du formulaire
const dateInput = createAmendeModal.querySelector('input[type="date"]:first-of-type');
const referenceInput = createAmendeModal.querySelector('input[placeholder="AMN-2025-XXXX"]');
const personneInput = createAmendeModal.querySelector('input[placeholder="Nom et prénom"]');
const montantInput = createAmendeModal.querySelector('input[type="number"]');
const statutSelect = createAmendeModal.querySelector('select:first-of-type');
// Validation des champs obligatoires
let isValid = true;
const requiredFields = [dateInput, referenceInput, personneInput, montantInput, statutSelect];
requiredFields.forEach(field => {
if (!field.value) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance to indicate saving
const originalContent = saveAmendeBtn.innerHTML;
saveAmendeBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveAmendeBtn.disabled = true;
saveAmendeBtn.classList.add('opacity-75');
// Simuler l'enregistrement
setTimeout(() => {
// Ajouter la nouvelle amende à la table
const amendesTable = document.querySelector('#amendes table tbody');
const newRow = document.createElement('tr');
newRow.classList.add('border-b', 'bg-green-50', 'transition-all');
const formattedDate = formatDate(dateInput.value);
const statut = statutSelect.value;
let statutClass = '';
let statutText = '';
if (statut === 'en_attente') {
statutClass = 'bg-yellow-100 text-yellow-800';
statutText = 'En attente';
} else if (statut === 'payee') {
statutClass = 'bg-green-100 text-green-800';
statutText = 'Payée';
} else if (statut === 'impayee') {
statutClass = 'bg-red-100 text-red-800';
statutText = 'Impayée';
}
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${formattedDate}</td>
<td class="px-4 py-3 text-sm">${referenceInput.value}</td>
<td class="px-4 py-3 text-sm">${personneInput.value}</td>
<td class="px-4 py-3 text-sm">${montantInput.value} €</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 ${statutClass} rounded-full text-xs">${statutText}</span>
</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary view-amende-btn">
<i class="ri-eye-line"></i>
</button>
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-primary edit-amende-btn">
<i class="ri-edit-line"></i>
</button>
</div>
</td>
`;
amendesTable.prepend(newRow);
// Restore button appearance
saveAmendeBtn.innerHTML = originalContent;
saveAmendeBtn.disabled = false;
saveAmendeBtn.classList.remove('opacity-75');
// Réinitialiser le formulaire
createAmendeModal.querySelectorAll('input, select, textarea').forEach(field => {
field.value = '';
});
// Fermer le modal
createAmendeModal.classList.add('hidden');
document.body.style.overflow = ''; // Rétablit le défilement de la page
// Afficher la notification de succès
showNotification('Amende créée avec succès', 'success');
// Retirer l'effet de highlight après un délai
setTimeout(() => {
newRow.classList.remove('bg-green-50', 'transition-all');
}, 1000);
// Réinitialiser les événements sur les nouveaux boutons
setTimeout(() => {
initViewAmendeButtons();
initEditAmendeButtons();
}, 100);
}, 800);
});
// Fonction pour formater la date
function formatDate(dateString) {
const date = new Date(dateString);
const day = String(date.getDate()).padStart(2, '0');
const month = String(date.getMonth() + 1).padStart(2, '0');
const year = date.getFullYear();
return `${day}/${month}/${year}`;
}
// Système de notification
function showNotification(message, type) {
// Créer l'élément de notification
const notification = document.createElement('div');
notification.className = `fixed top-4 right-4 px-6 py-3 rounded shadow-lg z-50 flex items-center gap-3 transition-all transform translate-x-full`;
if (type === 'success') {
notification.classList.add('bg-green-100', 'text-green-800', 'border-l-4', 'border-green-500');
notification.innerHTML = `
<i class="ri-checkbox-circle-line ri-lg"></i>
<span>${message}</span>
`;
} else if (type === 'error') {
notification.classList.add('bg-red-100', 'text-red-800', 'border-l-4', 'border-red-500');
notification.innerHTML = `
<i class="ri-error-warning-line ri-lg"></i>
<span>${message}</span>
`;
}
document.body.appendChild(notification);
// Animation d'entrée
setTimeout(() => {
notification.classList.remove('translate-x-full');
notification.classList.add('translate-x-0');
}, 10);
// Disparition automatique
setTimeout(() => {
notification.classList.remove('translate-x-0');
notification.classList.add('translate-x-full');
// Supprimer l'élément après l'animation
setTimeout(() => {
notification.remove();
}, 300);
}, 3000);
}
// Set current date
const currentDateEl = document.getElementById('currentDate');
currentDateEl.textContent = '08/04/2025';
// View Amende Modal
// Modal de visualisation des amendes
const viewAmendeModal = document.getElementById('viewAmendeModal');
const closeViewAmendeBtn = document.getElementById('closeViewAmendeBtn');
// Modal de visualisation des casiers
const viewCasierModal = document.createElement('div');
viewCasierModal.id = 'viewCasierModal';
viewCasierModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50';
viewCasierModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails du Casier <span id="casierId" class="text-primary"></span></h3>
<button id="closeViewCasierBtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations personnelles -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<div class="flex items-center gap-4 mb-4">
<div class="w-20 h-20 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center" id="viewCasierPhoto">
<div class="w-20 h-20 flex items-center justify-center">
<i class="ri-user-fill ri-2x text-gray-400"></i>
</div>
</div>
<div>
<h4 class="font-medium text-lg" id="viewCasierNom"></h4>
<p class="text-sm text-gray-500" id="viewCasierDateNaissance"></p>
</div>
</div>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Téléphone</p>
<p class="font-medium" id="viewCasierTelephone"></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Profession</p>
<p class="font-medium" id="viewCasierProfession"></p>
</div>
<div class="col-span-2">
<p class="text-sm text-gray-500 mb-1">Adresse</p>
<p class="font-medium" id="viewCasierAdresse"></p>
</div>
</div>
</div>
<!-- Historique des peines -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Historique des peines</h4>
<div id="viewCasierPeines" class="space-y-3">
<!-- Les peines seront ajoutées dynamiquement ici -->
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p id="viewCasierNotes" class="text-sm"></p>
</div>
<div class="bg-gray-50 p-4 rounded">
<h4 class="font-medium text-lg mb-4">Documents associés</h4>
<ul class="space-y-2">
<li class="flex items-center gap-2">
<i class="ri-file-pdf-line text-red-500"></i>
<span class="text-sm">Dossier_complet.pdf</span>
<button class="ml-auto w-6 h-6 flex items-center justify-center text-gray-500 hover:text-primary download-btn" data-filename="Dossier_complet.pdf">
<i class="ri-download-line"></i>
</button>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<div>
<button id="editCasierFromViewBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-edit-line"></i>
</div>
Modifier
</button>
</div>
<div class="flex gap-3">
<button class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-printer-line"></i>
</div>
Imprimer
</button>
<button class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-download-line"></i>
</div>
Exporter
</button>
</div>
</div>
</div>
`;
document.body.appendChild(viewCasierModal);
// Fonction pour fermer le modal de visualisation des casiers
document.getElementById('closeViewCasierBtn').addEventListener('click', function() {
viewCasierModal.classList.add('hidden');
document.body.style.overflow = '';
});
// Fonction pour gérer le téléchargement des fichiers
function handleFileDownload(filename) {
// Créer un élément de notification pour indiquer que le téléchargement a commencé
showNotification(`Téléchargement de ${filename} démarré`, 'success');
// Simuler un téléchargement (dans une application réelle, cela serait remplacé par un vrai téléchargement)
setTimeout(() => {
// Créer un élément <a> invisible pour déclencher le téléchargement
const link = document.createElement('a');
link.href = '#'; // Dans une application réelle, ce serait l'URL du fichier
link.download = filename;
// Simuler un clic sur le lien pour déclencher le téléchargement
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
// Afficher une notification de confirmation
showNotification(`Téléchargement de ${filename} terminé`, 'success');
}, 1000);
}
// Fonction pour initialiser les boutons de téléchargement
function initDownloadButtons() {
const downloadButtons = document.querySelectorAll('.download-btn');
downloadButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.stopPropagation();
// Ajouter une classe pour indiquer que le téléchargement est en cours
this.classList.add('text-primary', 'animate-pulse');
// Récupérer le nom du fichier à partir de l'attribut data
const filename = this.dataset.filename;
// Gérer le téléchargement
handleFileDownload(filename);
// Retirer l'animation après un délai
setTimeout(() => {
this.classList.remove('animate-pulse');
}, 2000);
});
});
}
// Fonction pour initialiser les boutons de visualisation d'amende
function initViewAmendeButtons() {
const viewButtons = document.querySelectorAll('.view-amende-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function() {
const ref = this.dataset.ref;
const date = this.dataset.date;
const personne = this.dataset.personne;
const montant = this.dataset.montant;
const statut = this.dataset.statut;
const type = this.dataset.type;
const lieu = this.dataset.lieu;
const notes = this.dataset.notes;
// Remplir les informations dans le modal
document.getElementById('amendeRef').textContent = ref;
document.getElementById('amendeDate').textContent = date;
document.getElementById('amendePersonne').textContent = personne;
document.getElementById('amendeMontant').textContent = `${montant} €`;
document.getElementById('amendeType').textContent = type;
document.getElementById('amendeLieu').textContent = lieu;
document.getElementById('amendeNotes').textContent = notes;
// Gérer l'affichage du statut avec la bonne couleur
const statutContainer = document.getElementById('amendeStatutContainer');
let statutClass = '';
if (statut === 'En attente') {
statutClass = 'bg-yellow-100 text-yellow-800';
} else if (statut === 'Payée') {
statutClass = 'bg-green-100 text-green-800';
} else if (statut === 'Impayée') {
statutClass = 'bg-red-100 text-red-800';
}
statutContainer.innerHTML = `<span class="px-2 py-1 ${statutClass} rounded-full text-xs">${statut}</span>`;
// Afficher l'historique des paiements en fonction du statut
const paiementHistorique = document.getElementById('paiementHistorique');
if (statut === 'Payée') {
paiementHistorique.innerHTML = `
<div class="border-l-4 border-green-500 pl-3 py-2 mb-3 bg-green-50">
<p class="text-sm font-medium">Paiement reçu</p>
<p class="text-xs text-gray-500">04/04/2025 - Carte bancaire</p>
<p class="text-sm mt-1">${montant} €</p>
</div>
<p class="text-sm text-green-600 font-medium">Amende entièrement réglée</p>
`;
} else if (statut === 'En attente') {
paiementHistorique.innerHTML = `
<p class="text-sm mb-3">Aucun paiement enregistré</p>
<div class="border-l-4 border-yellow-500 pl-3 py-2 bg-yellow-50">
<p class="text-sm font-medium">Date limite de paiement</p>
<p class="text-xs text-gray-500">20/04/2025</p>
<button id="enregistrerPaiementBtn" class="mt-3 px-3 py-1.5 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-bank-card-line"></i>
</div>
Enregistrer un paiement
</button>
</div>
`;
// Ajouter l'événement pour le bouton d'enregistrement de paiement
setTimeout(() => {
const enregistrerPaiementBtn = document.getElementById('enregistrerPaiementBtn');
if (enregistrerPaiementBtn) {
enregistrerPaiementBtn.addEventListener('click', function(e) {
e.stopPropagation();
// Créer un formulaire de paiement dynamique
const paiementForm = document.createElement('div');
paiementForm.className = 'mt-3 p-3 bg-white border border-gray-200 rounded';
paiementForm.innerHTML = `
<h5 class="font-medium text-sm mb-3">Enregistrer le paiement</h5>
<div class="grid grid-cols-2 gap-3 mb-3">
<div>
<label class="block text-xs text-gray-500 mb-1">Montant (€)</label>
<input type="number" value="${montant}" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-xs text-gray-500 mb-1">Date</label>
<input type="date" value="${new Date().toISOString().split('T')[0]}" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
<div class="col-span-2">
<label class="block text-xs text-gray-500 mb-1">Méthode de paiement</label>
<div class="relative">
<select class="w-full px-2 py-1 text-sm border border-gray-300 rounded appearance-none focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary pr-8">
<option value="carte">Carte bancaire</option>
<option value="especes">Espèces</option>
<option value="virement">Virement bancaire</option>
<option value="cheque">Chèque</option>
</select>
<div class="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="col-span-2">
<label class="block text-xs text-gray-500 mb-1">Remarque</label>
<input type="text" placeholder="Informations complémentaires..." class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="flex justify-end gap-2">
<button id="cancelPaiementBtn" class="px-3 py-1 border border-gray-300 rounded-button text-xs whitespace-nowrap">
Annuler
</button>
<button id="confirmPaiementBtn" class="px-3 py-1 bg-primary text-white rounded-button text-xs whitespace-nowrap">
Confirmer
</button>
</div>
`;
// Remplacer le bouton par le formulaire
this.parentNode.replaceChild(paiementForm, this);
// Ajouter les événements aux boutons du formulaire
const cancelPaiementBtn = document.getElementById('cancelPaiementBtn');
const confirmPaiementBtn = document.getElementById('confirmPaiementBtn');
cancelPaiementBtn.addEventListener('click', function() {
// Recréer le bouton d'enregistrement de paiement
const newButton = document.createElement('button');
newButton.id = 'enregistrerPaiementBtn';
newButton.className = 'mt-3 px-3 py-1.5 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2';
newButton.innerHTML = `
<i class="ri-bank-card-line"></i>
Enregistrer un paiement
`;
// Remplacer le formulaire par le bouton
paiementForm.parentNode.replaceChild(newButton, paiementForm);
// Réinitialiser l'événement sur le nouveau bouton
document.getElementById('enregistrerPaiementBtn').addEventListener('click', enregistrerPaiementBtn.onclick);
});
confirmPaiementBtn.addEventListener('click', function() {
// Simuler l'enregistrement du paiement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'flex items-center justify-center py-3';
loadingIndicator.innerHTML = `
<div class="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
<span class="ml-2 text-sm text-gray-600">Traitement en cours...</span>
`;
paiementForm.parentNode.replaceChild(loadingIndicator, paiementForm);
// Simuler un délai de traitement
setTimeout(() => {
// Mettre à jour l'affichage pour montrer que le paiement a été effectué
const paiementHistorique = document.getElementById('paiementHistorique');
paiementHistorique.innerHTML = `
<div class="border-l-4 border-green-500 pl-3 py-2 mb-3 bg-green-50">
<p class="text-sm font-medium">Paiement reçu</p>
<p class="text-xs text-gray-500">${formatDate(new Date())} - Carte bancaire</p>
<p class="text-sm mt-1">${montant} €</p>
</div>
<p class="text-sm text-green-600 font-medium">Amende entièrement réglée</p>
`;
// Mettre à jour le statut de l'amende
const statutContainer = document.getElementById('amendeStatutContainer');
statutContainer.innerHTML = `<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Payée</span>`;
// Afficher une notification de succès
showNotification('Paiement enregistré avec succès', 'success');
// Mettre à jour le statut dans la liste des amendes (si l'amende est visible dans la liste)
const amendeRows = document.querySelectorAll('#amendes table tbody tr');
amendeRows.forEach(row => {
const refCell = row.querySelector('td:nth-child(2)');
if (refCell && refCell.textContent === ref) {
const statutCell = row.querySelector('td:nth-child(5) span');
if (statutCell) {
statutCell.className = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
statutCell.textContent = 'Payée';
}
}
});
}, 1500);
});
});
}
}, 0);
} else {
paiementHistorique.innerHTML = `
<div class="border-l-4 border-red-500 pl-3 py-2 mb-3 bg-red-50">
<p class="text-sm font-medium">Date limite dépassée</p>
<p class="text-xs text-gray-500">15/04/2025</p>
</div>
<p class="text-sm text-red-600 font-medium">Relance envoyée le 05/04/2025</p>
<button id="enregistrerPaiementBtn" class="mt-3 px-3 py-1.5 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-bank-card-line"></i>
</div>
Enregistrer un paiement
</button>
`;
// Ajouter l'événement pour le bouton d'enregistrement de paiement (même code que pour "En attente")
setTimeout(() => {
const enregistrerPaiementBtn = document.getElementById('enregistrerPaiementBtn');
if (enregistrerPaiementBtn) {
enregistrerPaiementBtn.addEventListener('click', function(e) {
e.stopPropagation();
// Créer un formulaire de paiement dynamique
const paiementForm = document.createElement('div');
paiementForm.className = 'mt-3 p-3 bg-white border border-gray-200 rounded';
paiementForm.innerHTML = `
<h5 class="font-medium text-sm mb-3">Enregistrer le paiement</h5>
<div class="grid grid-cols-2 gap-3 mb-3">
<div>
<label class="block text-xs text-gray-500 mb-1">Montant (€)</label>
<input type="number" value="${montant}" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-xs text-gray-500 mb-1">Date</label>
<input type="date" value="${new Date().toISOString().split('T')[0]}" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
<div class="col-span-2">
<label class="block text-xs text-gray-500 mb-1">Méthode de paiement</label>
<div class="relative">
<select class="w-full px-2 py-1 text-sm border border-gray-300 rounded appearance-none focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary pr-8">
<option value="carte">Carte bancaire</option>
<option value="especes">Espèces</option>
<option value="virement">Virement bancaire</option>
<option value="cheque">Chèque</option>
</select>
<div class="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="col-span-2">
<label class="block text-xs text-gray-500 mb-1">Remarque</label>
<input type="text" placeholder="Informations complémentaires..." class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="flex justify-end gap-2">
<button id="cancelPaiementBtn" class="px-3 py-1 border border-gray-300 rounded-button text-xs whitespace-nowrap">
Annuler
</button>
<button id="confirmPaiementBtn" class="px-3 py-1 bg-primary text-white rounded-button text-xs whitespace-nowrap">
Confirmer
</button>
</div>
`;
// Remplacer le bouton par le formulaire
this.parentNode.replaceChild(paiementForm, this);
// Ajouter les événements aux boutons du formulaire
const cancelPaiementBtn = document.getElementById('cancelPaiementBtn');
const confirmPaiementBtn = document.getElementById('confirmPaiementBtn');
cancelPaiementBtn.addEventListener('click', function() {
// Recréer le bouton d'enregistrement de paiement
const newButton = document.createElement('button');
newButton.id = 'enregistrerPaiementBtn';
newButton.className = 'mt-3 px-3 py-1.5 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2';
newButton.innerHTML = `
<i class="ri-bank-card-line"></i>
Enregistrer un paiement
`;
// Remplacer le formulaire par le bouton
paiementForm.parentNode.replaceChild(newButton, paiementForm);
// Réinitialiser l'événement sur le nouveau bouton
document.getElementById('enregistrerPaiementBtn').addEventListener('click', enregistrerPaiementBtn.onclick);
});
confirmPaiementBtn.addEventListener('click', function() {
// Simuler l'enregistrement du paiement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'flex items-center justify-center py-3';
loadingIndicator.innerHTML = `
<div class="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
<span class="ml-2 text-sm text-gray-600">Traitement en cours...</span>
`;
paiementForm.parentNode.replaceChild(loadingIndicator, paiementForm);
// Simuler un délai de traitement
setTimeout(() => {
// Mettre à jour l'affichage pour montrer que le paiement a été effectué
const paiementHistorique = document.getElementById('paiementHistorique');
paiementHistorique.innerHTML = `
<div class="border-l-4 border-green-500 pl-3 py-2 mb-3 bg-green-50">
<p class="text-sm font-medium">Paiement reçu</p>
<p class="text-xs text-gray-500">${formatDate(new Date())} - Carte bancaire</p>
<p class="text-sm mt-1">${montant} €</p>
</div>
<p class="text-sm text-green-600 font-medium">Amende entièrement réglée</p>
`;
// Mettre à jour le statut de l'amende
const statutContainer = document.getElementById('amendeStatutContainer');
statutContainer.innerHTML = `<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Payée</span>`;
// Afficher une notification de succès
showNotification('Paiement enregistré avec succès', 'success');
// Mettre à jour le statut dans la liste des amendes (si l'amende est visible dans la liste)
const amendeRows = document.querySelectorAll('#amendes table tbody tr');
amendeRows.forEach(row => {
const refCell = row.querySelector('td:nth-child(2)');
if (refCell && refCell.textContent === ref) {
const statutCell = row.querySelector('td:nth-child(5) span');
if (statutCell) {
statutCell.className = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
statutCell.textContent = 'Payée';
}
}
});
}, 1500);
});
});
}
}, 0);
}
// Afficher le modal
viewAmendeModal.classList.remove('hidden');
// Ajouter un événement au bouton de modification dans la vue détaillée
setTimeout(() => {
const editAmendeFromViewBtn = document.getElementById('editAmendeFromViewBtn');
if (editAmendeFromViewBtn) {
editAmendeFromViewBtn.addEventListener('click', function() {
// Récupérer les données de l'amende à partir du modal de visualisation
const ref = document.getElementById('amendeRef').textContent;
const date = document.getElementById('amendeDate').textContent;
const personne = document.getElementById('amendePersonne').textContent;
const montant = document.getElementById('amendeMontant').textContent.replace(' €', '');
const statutElement = document.getElementById('amendeStatutContainer').querySelector('span');
const statut = statutElement.textContent;
const type = document.getElementById('amendeType').textContent;
const lieu = document.getElementById('amendeLieu').textContent;
const notes = document.getElementById('amendeNotes').textContent;
// Fermer le modal de visualisation
viewAmendeModal.classList.add('hidden');
// Créer le modal d'édition
const editAmendeModal = document.createElement('div');
editAmendeModal.id = 'editAmendeModal';
editAmendeModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
// Convertir la date du format DD/MM/YYYY au format YYYY-MM-DD pour l'input date
const dateParts = date.split('/');
const formattedDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
// Déterminer la valeur du statut pour le select
let statutValue = '';
if (statut === 'En attente') statutValue = 'en_attente';
else if (statut === 'Payée') statutValue = 'payee';
else if (statut === 'Impayée') statutValue = 'impayee';
editAmendeModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Modifier l'Amende ${ref}</h3>
<button id="closeEditAmendeBtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
<input type="date" id="editDate" value="${formattedDate}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editReference" value="${ref}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="AMN-2025-XXXX">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Personne concernée</label>
<input type="text" id="editPersonne" value="${personne}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Nom et prénom">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Montant (€)</label>
<input type="number" id="editMontant" value="${montant}" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
<div class="relative">
<select id="editStatut" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="en_attente" ${statutValue === 'en_attente' ? 'selected' : ''}>En attente</option>
<option value="payee" ${statutValue === 'payee' ? 'selected' : ''}>Payée</option>
<option value="impayee" ${statutValue === 'impayee' ? 'selected' : ''}>Impayée</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type d'infraction</label>
<div class="relative">
<select id="editType" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="Stationnement interdit" ${type === 'Stationnement interdit' ? 'selected' : ''}>Stationnement interdit</option>
<option value="Stationnement gênant" ${type === 'Stationnement gênant' ? 'selected' : ''}>Stationnement gênant</option>
<option value="Excès de vitesse" ${type === 'Excès de vitesse' ? 'selected' : ''}>Excès de vitesse</option>
<option value="Téléphone au volant" ${type === 'Téléphone au volant' ? 'selected' : ''}>Téléphone au volant</option>
<option value="Alcoolémie" ${type === 'Alcoolémie' ? 'selected' : ''}>Alcoolémie</option>
<option value="Autre" ${!['Stationnement interdit', 'Stationnement gênant', 'Excès de vitesse', 'Téléphone au volant', 'Alcoolémie'].includes(type) ? 'selected' : ''}>Autre</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date limite de paiement</label>
<input type="date" id="editDateLimite" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Lieu de l'infraction</label>
<input type="text" id="editLieu" value="${lieu}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Adresse complète">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
<textarea id="editNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3" placeholder="Informations complémentaires...">${notes}</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelEditAmendeBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditAmendeBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Enregistrer les modifications
</button>
</div>
</div>
`;
document.body.appendChild(editAmendeModal);
// Ajouter les événements aux boutons
document.getElementById('closeEditAmendeBtn').addEventListener('click', function() {
document.body.removeChild(editAmendeModal);
});
document.getElementById('cancelEditAmendeBtn').addEventListener('click', function() {
document.body.removeChild(editAmendeModal);
});
document.getElementById('saveEditAmendeBtn').addEventListener('click', function() {
// Récupérer les valeurs modifiées
const newDate = document.getElementById('editDate').value;
const newReference = document.getElementById('editReference').value;
const newPersonne = document.getElementById('editPersonne').value;
const newMontant = document.getElementById('editMontant').value;
const newStatutSelect = document.getElementById('editStatut');
const newStatutValue = newStatutSelect.value;
const newType = document.getElementById('editType').value;
const newLieu = document.getElementById('editLieu').value;
const newNotes = document.getElementById('editNotes').value;
// Validation des champs obligatoires
let isValid = true;
const requiredFields = [
document.getElementById('editDate'),
document.getElementById('editReference'),
document.getElementById('editPersonne'),
document.getElementById('editMontant')
];
requiredFields.forEach(field => {
if (!field.value) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance to indicate saving
const originalContent = document.getElementById('saveEditAmendeBtn').innerHTML;
document.getElementById('saveEditAmendeBtn').innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
document.getElementById('saveEditAmendeBtn').disabled = true;
document.getElementById('saveEditAmendeBtn').classList.add('opacity-75');
// Convertir la date au format d'affichage DD/MM/YYYY
const newDateObj = new Date(newDate);
const formattedNewDate = `${String(newDateObj.getDate()).padStart(2, '0')}/${String(newDateObj.getMonth() + 1).padStart(2, '0')}/${newDateObj.getFullYear()}`;
// Déterminer le texte et la classe du statut
let newStatutText = '';
let newStatutClass = '';
if (newStatutValue === 'en_attente') {
newStatutText = 'En attente';
newStatutClass = 'bg-yellow-100 text-yellow-800';
} else if (newStatutValue === 'payee') {
newStatutText = 'Payée';
newStatutClass = 'bg-green-100 text-green-800';
} else if (newStatutValue === 'impayee') {
newStatutText = 'Impayée';
newStatutClass = 'bg-red-100 text-red-800';
}
setTimeout(() => {
// Trouver la ligne correspondante dans le tableau
const amendeRows = document.querySelectorAll('#amendes table tbody tr');
let targetRow = null;
amendeRows.forEach(row => {
const refCell = row.querySelector('td:nth-child(2)');
if (refCell && refCell.textContent === ref) {
targetRow = row;
}
});
if (targetRow) {
// Mettre à jour la ligne dans le tableau
targetRow.cells[0].textContent = formattedNewDate;
targetRow.cells[1].textContent = newReference;
targetRow.cells[2].textContent = newPersonne;
targetRow.cells[3].textContent = `${newMontant} €`;
const statutElement = targetRow.cells[4].querySelector('span');
statutElement.textContent = newStatutText;
statutElement.className = `px-2 py-1 ${newStatutClass} rounded-full text-xs`;
// Mettre à jour les données du bouton de visualisation
const viewButton = targetRow.querySelector('.view-amende-btn');
if (viewButton) {
viewButton.dataset.ref = newReference;
viewButton.dataset.date = formattedNewDate;
viewButton.dataset.personne = newPersonne;
viewButton.dataset.montant = newMontant;
viewButton.dataset.statut = newStatutText;
viewButton.dataset.type = newType;
viewButton.dataset.lieu = newLieu;
viewButton.dataset.notes = newNotes;
}
// Ajouter un effet de highlight à la ligne modifiée
targetRow.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
targetRow.classList.remove('bg-green-50', 'transition-all');
}, 1000);
}
// Restore button appearance
document.getElementById('saveEditAmendeBtn').innerHTML = originalContent;
document.getElementById('saveEditAmendeBtn').disabled = false;
document.getElementById('saveEditAmendeBtn').classList.remove('opacity-75');
// Supprimer le modal d'édition
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Amende modifiée avec succès', 'success');
}, 800);
});
});
}
}, 0);
});
});
}
// Fonction pour confirmer la suppression d'une dépense
function confirmDeleteDepense(button) {
// Récupérer la ligne du tableau correspondante
const row = button.closest('tr');
// Récupérer les informations de la dépense
const date = row.cells[0]?.textContent || '';
const categorie = row.cells[1]?.textContent || '';
const description = row.cells[2]?.textContent || '';
const montant = row.cells[3]?.textContent || '';
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer cette dépense ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${description}</p>
<p class="text-sm text-gray-600">Catégorie: ${categorie}</p>
<p class="text-sm text-gray-600">Montant: ${montant}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeleteDepenseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeleteDepenseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeleteDepenseBtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Ajouter une animation de fermeture en douceur
deleteConfirmModal.style.transition = 'opacity 0.3s ease';
deleteConfirmModal.style.opacity = '0';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(deleteConfirmModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}, 300);
});
document.getElementById('confirmDeleteDepenseBtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau définitivement
row.remove();
// Supprimer le modal de confirmation et l'indicateur de chargement
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Dépense supprimée avec succès', 'success');
}, 1000);
});
}
// Initialiser les boutons au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
initViewAmendeButtons();
initEditAmendeButtons();
initEditDepenseButtons();
initDownloadButtons();
initSaveCasiersButton();
initViewCasierButtons();
// initViewDetailsButtons(); - Fonction désactivée car bouton supprimé
});
// Fermer le modal de visualisation
closeViewAmendeBtn.addEventListener('click', function() {
viewAmendeModal.classList.add('hidden');
});
// Fonction pour initialiser les boutons "Voir détails" des casiers - fonction vide car bouton supprimé
function initViewCasierButtons() {
const viewButtons = document.querySelectorAll('.view-casier-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function() {
const id = this.dataset.id;
const nom = this.dataset.nom;
const telephone = this.dataset.telephone;
const profession = this.dataset.profession;
const adresse = this.dataset.adresse;
const notes = this.dataset.notes;
const naissance = this.dataset.naissance;
const peines = this.dataset.peine;
// Formater la date de naissance
const dateNaissance = new Date(naissance);
const formattedNaissance = `${String(dateNaissance.getDate()).padStart(2, '0')}/${String(dateNaissance.getMonth() + 1).padStart(2, '0')}/${dateNaissance.getFullYear()}`;
// Mettre à jour les informations dans le modal
document.getElementById('casierId').textContent = id;
document.getElementById('viewCasierNom').textContent = nom;
document.getElementById('viewCasierDateNaissance').textContent = `Né(e) le ${formattedNaissance}`;
document.getElementById('viewCasierTelephone').textContent = telephone;
document.getElementById('viewCasierProfession').textContent = profession || 'Non spécifié';
document.getElementById('viewCasierAdresse').textContent = adresse;
document.getElementById('viewCasierNotes').textContent = notes;
// Traiter l'historique des peines
const peinesContainer = document.getElementById('viewCasierPeines');
peinesContainer.innerHTML = '';
if (peines) {
peines.split('\n').forEach(peine => {
if (peine.trim()) {
const peineEl = document.createElement('div');
peineEl.className = 'p-3 bg-white rounded shadow-sm';
peineEl.textContent = peine.trim();
peinesContainer.appendChild(peineEl);
}
});
} else {
peinesContainer.innerHTML = '<p class="text-sm text-gray-500">Aucune peine enregistrée</p>';
}
// Afficher le modal
viewCasierModal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
// Initialiser le bouton d'édition dans la vue détaillée
document.getElementById('editCasierFromViewBtn').addEventListener('click', function() {
// Fermer le modal de visualisation
viewCasierModal.classList.add('hidden');
// Trouver et cliquer sur le bouton d'édition correspondant
const editButtons = document.querySelectorAll('.edit-casier-btn');
editButtons.forEach(editBtn => {
if (editBtn.dataset.id === id) {
editBtn.click();
}
});
});
});
});
}
// Initialiser les boutons de téléchargement lorsque le modal de visualisation est affiché
document.addEventListener('click', function(e) {
if (e.target.closest('.view-amende-btn')) {
// Attendre que le modal soit affiché et que le DOM soit mis à jour
setTimeout(() => {
initDownloadButtons();
}, 100);
}
});
// Réinitialiser les boutons après l'ajout d'une nouvelle amende
saveAmendeBtn.addEventListener('click', function() {
// Le code existant reste inchangé
// Ajouter un délai pour s'assurer que le DOM est mis à jour
setTimeout(() => {
initViewAmendeButtons();
initEditAmendeButtons();
initEditDepenseButtons();
initDownloadButtons();
// initViewDetailsButtons(); - Fonction désactivée car bouton supprimé
}, 600);
});
// Save Casiers functionality
function saveCasiers() {
// Get all casier cards
const casierCards = document.querySelectorAll('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3.gap-6 > div');
// Check for validation errors
let hasErrors = false;
let errorMessages = [];
casierCards.forEach((card, index) => {
const casierName = card.querySelector('h3.font-semibold')?.textContent || `Casier #${index + 1}`;
const phoneElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Téléphone") + p.text-sm');
const addressElement = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Adresse") + p.text-sm');
// Check required fields
if (!phoneElement || !phoneElement.textContent || phoneElement.textContent.trim() === '') {
hasErrors = true;
errorMessages.push(`${casierName}: Numéro de téléphone manquant`);
}
if (!addressElement || !addressElement.textContent || addressElement.textContent.trim() === '') {
hasErrors = true;
errorMessages.push(`${casierName}: Adresse manquante`);
}
});
// If there are errors, show them
if (hasErrors) {
// Create error dialog
const errorDialog = document.createElement('div');
errorDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
errorDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 overflow-auto max-h-[80vh]">
<div class="p-6 border-b">
<h3 class="text-lg font-semibold text-red-600 mb-2">Erreurs de validation</h3>
<p class="text-gray-600 mb-2">Veuillez corriger les erreurs suivantes avant de sauvegarder :</p>
<ul class="list-disc pl-5 text-sm text-gray-700 space-y-1">
${errorMessages.map(msg => `<li>${msg}</li>`).join('')}
</ul>
</div>
<div class="p-4 bg-gray-50 flex justify-end">
<button id="closeErrorDialogBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Compris
</button>
</div>
</div>
`;
document.body.appendChild(errorDialog);
// Add event listener to close button
document.getElementById('closeErrorDialogBtn').addEventListener('click', function() {
document.body.removeChild(errorDialog);
});
return false;
}
// Simulate saving process (in a real app, this would be an API call)
// Save casiers data to localStorage
const casiersData = [];
casierCards.forEach(card => {
const id = card.querySelector('.edit-casier-btn')?.dataset.id;
const nom = card.querySelector('h3.font-semibold')?.textContent;
const telephone = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Téléphone") + p.text-sm')?.textContent;
const profession = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Profession") + p.text-sm')?.textContent;
const adresse = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Adresse") + p.text-sm')?.textContent;
const notes = card.querySelector('p.text-xs.text-gray-500.mb-1:contains("Notes") + p.text-sm')?.textContent;
const naissance = card.querySelector('.edit-casier-btn')?.dataset.naissance;
if (id) {
casiersData.push({
id, nom, telephone, profession, adresse, notes, naissance
});
}
});
// Save to localStorage
localStorage.setItem('casiersData', JSON.stringify(casiersData));
return true;
}
function initSaveCasiersButton() {
// Initialiser le bouton dans le modal
const saveCasiersBtn = document.getElementById('saveCasiersBtn');
if (saveCasiersBtn) {
saveCasiersBtn.addEventListener('click', function() {
// Change button appearance to indicate saving
const originalContent = saveCasiersBtn.innerHTML;
saveCasiersBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
<span>Sauvegarde...</span>
`;
saveCasiersBtn.disabled = true;
saveCasiersBtn.classList.add('opacity-75');
// Call the save function
const saveSuccess = saveCasiers();
if (saveSuccess) {
// Simulate saving process
setTimeout(() => {
// Get all casier cards
const casierCards = document.querySelectorAll('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3.gap-6 > div');
// Count the number of casiers
const casierCount = casierCards.length;
// Restore button appearance
saveCasiersBtn.innerHTML = originalContent;
saveCasiersBtn.disabled = false;
saveCasiersBtn.classList.remove('opacity-75');
// Show success notification
showNotification(`${casierCount} casiers sauvegardés avec succès`, 'success');
// Brief highlight effect on the casier cards to indicate success
casierCards.forEach(card => {
card.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
setTimeout(() => {
card.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
}, 1000);
});
}, 800);
} else {
// Restore button appearance if validation failed
saveCasiersBtn.innerHTML = originalContent;
saveCasiersBtn.disabled = false;
saveCasiersBtn.classList.remove('opacity-75');
}
});
}
// Initialiser le bouton global dans la page principale
const saveCasiersGlobalBtn = document.getElementById('saveCasiersGlobalBtn');
if (saveCasiersGlobalBtn) {
saveCasiersGlobalBtn.addEventListener('click', function() {
// Change button appearance to indicate saving
const originalContent = saveCasiersGlobalBtn.innerHTML;
saveCasiersGlobalBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
<span>Sauvegarde...</span>
`;
saveCasiersGlobalBtn.disabled = true;
saveCasiersGlobalBtn.classList.add('opacity-75');
// Call the save function
const saveSuccess = saveCasiers();
if (saveSuccess) {
// Simulate saving process
setTimeout(() => {
// Get all casier cards
const casierCards = document.querySelectorAll('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3.gap-6 > div');
// Count the number of casiers
const casierCount = casierCards.length;
// Restore button appearance
saveCasiersGlobalBtn.innerHTML = originalContent;
saveCasiersGlobalBtn.disabled = false;
saveCasiersGlobalBtn.classList.remove('opacity-75');
// Show success notification
showNotification(`${casierCount} casiers sauvegardés avec succès`, 'success');
// Brief highlight effect on the casier cards to indicate success
casierCards.forEach(card => {
card.classList.add('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
setTimeout(() => {
card.classList.remove('ring-2', 'ring-green-500', 'ring-opacity-50', 'transition-all');
}, 1000);
});
}, 800);
} else {
// Restore button appearance if validation failed
saveCasiersGlobalBtn.innerHTML = originalContent;
saveCasiersGlobalBtn.disabled = false;
saveCasiersGlobalBtn.classList.remove('opacity-75');
}
});
}
}
// Edit Amende Modal
function initEditAmendeButtons() {
const editButtons = document.querySelectorAll('.edit-amende-btn');
editButtons.forEach(button => {
button.addEventListener('click', function() {
// Récupérer les données de l'amende à partir de la ligne du tableau
const row = this.closest('tr');
const date = row.cells[0].textContent;
const reference = row.cells[1].textContent;
const personne = row.cells[2].textContent;
const montant = row.cells[3].textContent.replace(' €', '');
const statutElement = row.cells[4].querySelector('span');
const statut = statutElement ? statutElement.textContent : '';
// Créer le modal d'édition
const editAmendeModal = document.createElement('div');
editAmendeModal.id = 'editAmendeModal';
editAmendeModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
// Convertir la date du format DD/MM/YYYY au format YYYY-MM-DD pour l'input date
const dateParts = date.split('/');
const formattedDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
// Déterminer la valeur du statut pour le select
let statutValue = '';
if (statut === 'En attente') statutValue = 'en_attente';
else if (statut === 'Payée') statutValue = 'payee';
else if (statut === 'Impayée') statutValue = 'impayee';
// Récupérer les informations supplémentaires si disponibles
let type = '';
let lieu = '';
let notes = '';
// Chercher si cette amende a un bouton de visualisation avec des données
const viewButton = row.querySelector('.view-amende-btn');
if (viewButton) {
type = viewButton.dataset.type || '';
lieu = viewButton.dataset.lieu || '';
notes = viewButton.dataset.notes || '';
}
editAmendeModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Modifier l'Amende ${reference}</h3>
<button id="closeEditAmendeBtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
<input type="date" id="editDate" value="${formattedDate}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editReference" value="${reference}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="AMN-2025-XXXX">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Personne concernée</label>
<input type="text" id="editPersonne" value="${personne}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Nom et prénom">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Montant (€)</label>
<input type="number" id="editMontant" value="${montant}" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Statut</label>
<div class="relative">
<select id="editStatut" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="en_attente" ${statutValue === 'en_attente' ? 'selected' : ''}>En attente</option>
<option value="payee" ${statutValue === 'payee' ? 'selected' : ''}>Payée</option>
<option value="impayee" ${statutValue === 'impayee' ? 'selected' : ''}>Impayée</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type d'infraction</label>
<div class="relative">
<select id="editType" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="Stationnement interdit" ${type === 'Stationnement interdit' ? 'selected' : ''}>Stationnement interdit</option>
<option value="Stationnement gênant" ${type === 'Stationnement gênant' ? 'selected' : ''}>Stationnement gênant</option>
<option value="Excès de vitesse" ${type === 'Excès de vitesse' ? 'selected' : ''}>Excès de vitesse</option>
<option value="Téléphone au volant" ${type === 'Téléphone au volant' ? 'selected' : ''}>Téléphone au volant</option>
<option value="Alcoolémie" ${type === 'Alcoolémie' ? 'selected' : ''}>Alcoolémie</option>
<option value="Autre" ${!['Stationnement interdit', 'Stationnement gênant', 'Excès de vitesse', 'Téléphone au volant', 'Alcoolémie'].includes(type) ? 'selected' : ''}>Autre</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date limite de paiement</label>
<input type="date" id="editDateLimite" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Lieu de l'infraction</label>
<input type="text" id="editLieu" value="${lieu}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" placeholder="Adresse complète">
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
<textarea id="editNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3" placeholder="Informations complémentaires...">${notes}</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deleteAmendeBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditAmendeBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditAmendeBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Enregistrer les modifications
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editAmendeModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Ajouter les événements aux boutons
document.getElementById('closeEditAmendeBtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const originalDate = formattedDate;
const originalReference = reference;
const originalPersonne = personne;
const originalMontant = montant;
const originalStatut = statutValue;
const originalType = type;
const originalLieu = lieu;
const originalNotes = notes;
const newDate = document.getElementById('editDate').value;
const newReference = document.getElementById('editReference').value;
const newPersonne = document.getElementById('editPersonne').value;
const newMontant = document.getElementById('editMontant').value;
const newStatut = document.getElementById('editStatut').value;
const newType = document.getElementById('editType').value;
const newLieu = document.getElementById('editLieu').value;
const newNotes = document.getElementById('editNotes').value;
// Vérifier si des modifications ont été apportées
const hasChanges =
originalDate !== newDate ||
originalReference !== newReference ||
originalPersonne !== newPersonne ||
originalMontant !== newMontant ||
originalStatut !== newStatut ||
originalType !== newType ||
originalLieu !== newLieu ||
originalNotes !== newNotes;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}
});
document.getElementById('cancelEditAmendeBtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const originalDate = formattedDate;
const originalReference = reference;
const originalPersonne = personne;
const originalMontant = montant;
const originalStatut = statutValue;
const originalType = type;
const originalLieu = lieu;
const originalNotes = notes;
const newDate = document.getElementById('editDate').value;
const newReference = document.getElementById('editReference').value;
const newPersonne = document.getElementById('editPersonne').value;
const newMontant = document.getElementById('editMontant').value;
const newStatut = document.getElementById('editStatut').value;
const newType = document.getElementById('editType').value;
const newLieu = document.getElementById('editLieu').value;
const newNotes = document.getElementById('editNotes').value;
// Vérifier si des modifications ont été apportées
const hasChanges =
originalDate !== newDate ||
originalReference !== newReference ||
originalPersonne !== newPersonne ||
originalMontant !== newMontant ||
originalStatut !== newStatut ||
originalType !== newType ||
originalLieu !== newLieu ||
originalNotes !== newNotes;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}
});
// Ajouter l'événement pour le bouton de suppression
document.getElementById('deleteAmendeBtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement cette amende ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
<p class="text-sm text-gray-600">Personne: ${personne}</p>
<p class="text-sm text-gray-600">Montant: ${montant} €</p>
</div>
<p class="text-sm text-red-600">Cette action est irréversible.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeleteBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeleteBtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
// Supprimer le modal de confirmation
document.body.removeChild(deleteConfirmModal);
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer le modal d'édition et l'indicateur de chargement
document.body.removeChild(editAmendeModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Amende supprimée avec succès', 'success');
}, 1000);
});
});
document.getElementById('saveEditAmendeBtn').addEventListener('click', function() {
// Récupérer les valeurs modifiées
const newDate = document.getElementById('editDate').value;
const newReference = document.getElementById('editReference').value;
const newPersonne = document.getElementById('editPersonne').value;
const newMontant = document.getElementById('editMontant').value;
const newStatutSelect = document.getElementById('editStatut');
const newStatutValue = newStatutSelect.value;
const newType = document.getElementById('editType').value;
const newLieu = document.getElementById('editLieu').value;
const newNotes = document.getElementById('editNotes').value;
// Validation des champs obligatoires
let isValid = true;
const requiredFields = [
document.getElementById('editDate'),
document.getElementById('editReference'),
document.getElementById('editPersonne'),
document.getElementById('editMontant')
];
requiredFields.forEach(field => {
if (!field.value) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Changer l'apparence du bouton pour indiquer la sauvegarde
const saveBtn = document.getElementById('saveEditAmendeBtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Convertir la date au format d'affichage DD/MM/YYYY
const newDateObj = new Date(newDate);
const formattedNewDate = `${String(newDateObj.getDate()).padStart(2, '0')}/${String(newDateObj.getMonth() + 1).padStart(2, '0')}/${newDateObj.getFullYear()}`;
// Déterminer le texte et la classe du statut
let newStatutText = '';
let newStatutClass = '';
if (newStatutValue === 'en_attente') {
newStatutText = 'En attente';
newStatutClass = 'bg-yellow-100 text-yellow-800';
} else if (newStatutValue === 'payee') {
newStatutText = 'Payée';
newStatutClass = 'bg-green-100 text-green-800';
} else if (newStatutValue === 'impayee') {
newStatutText = 'Impayée';
newStatutClass = 'bg-red-100 text-red-800';
}
// Simuler l'enregistrement avec possibilité d'échec
setTimeout(() => {
// Simuler une chance d'échec (10%)
const saveSuccess = Math.random() > 0.1;
if (saveSuccess) {
// Mettre à jour la ligne dans le tableau
row.cells[0].textContent = formattedNewDate;
row.cells[1].textContent = newReference;
row.cells[2].textContent = newPersonne;
row.cells[3].textContent = `${newMontant} €`;
statutElement.textContent = newStatutText;
statutElement.className = `px-2 py-1 ${newStatutClass} rounded-full text-xs`;
// Mettre à jour les données du bouton de visualisation si disponible
if (viewButton) {
viewButton.dataset.ref = newReference;
viewButton.dataset.date = formattedNewDate;
viewButton.dataset.personne = newPersonne;
viewButton.dataset.montant = newMontant;
viewButton.dataset.statut = newStatutText;
viewButton.dataset.type = newType;
viewButton.dataset.lieu = newLieu;
viewButton.dataset.notes = newNotes;
}
// Supprimer le modal d'édition
document.body.removeChild(editAmendeModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Amende modifiée avec succès', 'success');
// Ajouter un effet de highlight à la ligne modifiée
row.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
row.classList.remove('bg-green-50', 'transition-all');
}, 1500);
} else {
// Restaurer l'apparence du bouton
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Afficher une notification d'erreur
showNotification('Erreur lors de la sauvegarde: Problème de connexion au serveur. Veuillez réessayer.', 'error');
}
}, 1500);
});
});
});
}
// Edit Depense Modal
function initEditDepenseButtons() {
// Initialiser les boutons de suppression de dépense
const deleteButtons = document.querySelectorAll('.supprimerModified');
deleteButtons.forEach(button => {
if (!button.hasAttribute('onclick')) {
button.setAttribute('onclick', 'confirmDeleteDepense(this)');
}
});
const editButtons = document.querySelectorAll('.edit-depense-btn');
editButtons.forEach(button => {
button.addEventListener('click', function() {
// Récupérer les données de la dépense à partir de la ligne du tableau
const row = this.closest('tr');
const date = row.cells[0].textContent;
const categorie = row.cells[1].textContent;
const description = row.cells[2].textContent;
const montant = row.cells[3].textContent.replace(' €', '');
// Créer le modal d'édition
const editDepenseModal = document.createElement('div');
editDepenseModal.id = 'editDepenseModal';
editDepenseModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
// Convertir la date du format DD/MM/YYYY au format YYYY-MM-DD pour l'input date
const dateParts = date.split('/');
const formattedDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
editDepenseModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Modifier la Dépense</h3>
<button id="closeEditDepenseBtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
<input type="date" id="editDepenseDate" value="${formattedDate}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Catégorie</label>
<div class="relative">
<select id="editDepenseCategorie" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="Fournitures" ${categorie === 'Fournitures' ? 'selected' : ''}>Fournitures</option>
<option value="Transport" ${categorie === 'Transport' ? 'selected' : ''}>Transport</option>
<option value="Équipement" ${categorie === 'Équipement' ? 'selected' : ''}>Équipement</option>
<option value="Communication" ${categorie === 'Communication' ? 'selected' : ''}>Communication</option>
<option value="Formation" ${categorie === 'Formation' ? 'selected' : ''}>Formation</option>
<option value="Autre" ${!['Fournitures', 'Transport', 'Équipement', 'Communication', 'Formation'].includes(categorie) ? 'selected' : ''}>Autre</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
<input type="text" id="editDepenseDescription" value="${description}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Montant (€)</label>
<input type="number" id="editDepenseMontant" value="${montant}" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Méthode de paiement</label>
<div class="relative">
<select id="editDepensePaiement" class="w-full px-3 py-2 border border-gray-300 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary pr-8">
<option value="carte">Carte bancaire</option>
<option value="especes">Espèces</option>
<option value="virement">Virement bancaire</option>
<option value="cheque">Chèque</option>
</select>
<div class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 flex items-center justify-center text-gray-400 pointer-events-none">
<i class="ri-arrow-down-s-line"></i>
</div>
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="editDepenseNotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3"></textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deleteDepenseBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditDepenseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditDepenseBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Enregistrer les modifications
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editDepenseModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Ajouter les événements aux boutons
document.getElementById('closeEditDepenseBtn').addEventListener('click', function() {
document.body.removeChild(editDepenseModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
});
document.getElementById('cancelEditDepenseBtn').addEventListener('click', function() {
document.body.removeChild(editDepenseModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
});
// Gérer l'upload de fichier
const editDepenseFileInput = document.getElementById('editDepenseFileInput');
const editDepenseUploadBtn = document.getElementById('editDepenseUploadBtn');
const editDepenseFileName = document.getElementById('editDepenseFileName');
const editDepenseRemoveFileBtn = document.getElementById('editDepenseRemoveFileBtn');
if (editDepenseUploadBtn) {
editDepenseUploadBtn.addEventListener('click', function() {
editDepenseFileInput.click();
});
}
if (editDepenseFileInput) {
editDepenseFileInput.addEventListener('change', function() {
if (this.files && this.files[0]) {
editDepenseFileName.textContent = this.files[0].name;
editDepenseRemoveFileBtn.classList.remove('hidden');
} else {
editDepenseFileName.textContent = 'Aucun fichier sélectionné';
editDepenseRemoveFileBtn.classList.add('hidden');
}
});
}
if (editDepenseRemoveFileBtn) {
editDepenseRemoveFileBtn.addEventListener('click', function() {
editDepenseFileInput.value = '';
editDepenseFileName.textContent = 'Aucun fichier sélectionné';
this.classList.add('hidden');
});
}

// Ajouter l'événement pour le bouton de suppression
document.getElementById('deleteDepenseBtn').addEventListener('click', function() {
confirmDeleteDepense(row.querySelector('.supprimerModified'));
});

// Ajouter l'événement pour le bouton de sauvegarde
document.getElementById('saveEditDepenseBtn').addEventListener('click', function() {
// Récupérer les valeurs modifiées
const newDate = document.getElementById('editDepenseDate').value;
const newCategorie = document.getElementById('editDepenseCategorie').value;
const newDescription = document.getElementById('editDepenseDescription').value;
const newMontant = document.getElementById('editDepenseMontant').value;
const newPaiement = document.getElementById('editDepensePaiement').value;
const newNotes = document.getElementById('editDepenseNotes').value;
// Validation des champs obligatoires
let isValid = true;
const requiredFields = [
document.getElementById('editDepenseDate'),
document.getElementById('editDepenseDescription'),
document.getElementById('editDepenseMontant')
];
requiredFields.forEach(field => {
if (!field.value) {
field.classList.add('border-red-500');
isValid = false;
} else {
field.classList.remove('border-red-500');
}
});
if (!isValid) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Récupérer les valeurs originales pour comparaison
const originalDate = row.cells[0].textContent;
const originalCategorie = row.cells[1].textContent;
const originalDescription = row.cells[2].textContent;
const originalMontant = row.cells[3].textContent.replace(' €', '');
// Convertir la date au format d'affichage DD/MM/YYYY pour comparaison
const newDateObj = new Date(newDate);
const formattedNewDate = `${String(newDateObj.getDate()).padStart(2, '0')}/${String(newDateObj.getMonth() + 1).padStart(2, '0')}/${newDateObj.getFullYear()}`;
// Vérifier si des modifications importantes ont été apportées
const montantChange = parseFloat(newMontant) !== parseFloat(originalMontant);
const categorieChange = newCategorie !== originalCategorie;
const importantChanges = montantChange || categorieChange;
if (importantChanges) {
// Créer une boîte de dialogue de confirmation pour les modifications importantes
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-lg font-semibold">Confirmation des modifications</h3>
</div>
<div class="p-6">
<p class="text-gray-600 mb-4">Vous avez apporté des modifications importantes à cette dépense :</p>
<div class="bg-gray-50 p-4 rounded mb-4">
${montantChange ? `<p class="text-sm mb-2"><span class="font-medium">Montant :</span> ${originalMontant} € → ${newMontant} €</p>` : ''}
${categorieChange ? `<p class="text-sm"><span class="font-medium">Catégorie :</span> ${originalCategorie} → ${newCategorie}</p>` : ''}
</div>
<p class="text-gray-600">Êtes-vous sûr de vouloir enregistrer ces modifications ?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelSaveBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmSaveBtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap">
Confirmer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelSaveBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmSaveBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
// Procéder à l'enregistrement après confirmation
proceedWithSave();
});
} else {
// Pas de modifications importantes, procéder directement
proceedWithSave();
}
// Fonction pour procéder à l'enregistrement
function proceedWithSave() {
// Change button appearance to indicate saving
const saveBtn = document.getElementById('saveEditDepenseBtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
<span>Enregistrement...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Simuler un délai de traitement avec possibilité d'échec
setTimeout(() => {
// Simuler une chance d'échec (5%)
const saveSuccess = Math.random() > 0.05;
if (saveSuccess) {
// Mettre à jour la ligne dans le tableau
row.cells[0].textContent = formattedNewDate;
row.cells[1].textContent = newCategorie;
row.cells[2].textContent = newDescription;
row.cells[3].textContent = `${newMontant} €`;
// Ajouter un effet de highlight à la ligne modifiée avec animation
row.style.transition = 'background-color 0.5s ease';
row.style.backgroundColor = '#d1fae5'; // Vert clair
// Supprimer le modal d'édition avec animation de fermeture
editDepenseModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
editDepenseModal.style.opacity = '0';
editDepenseModal.style.transform = 'scale(0.95)';
setTimeout(() => {
document.body.removeChild(editDepenseModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('Dépense modifiée avec succès', 'success');
// Retirer l'effet de highlight après un délai
setTimeout(() => {
row.style.backgroundColor = '';
}, 1500);
}, 300);
// Enregistrer les modifications
const depensesData = JSON.parse(localStorage.getItem('depensesData') || '[]');
const depenseIndex = depensesData.findIndex(d => d.id === row.dataset.id);
if (depenseIndex !== -1) {
depensesData[depenseIndex] = {
id: row.dataset.id,
date: formattedNewDate,
categorie: newCategorie,
description: newDescription,
montant: newMontant,
paiement: newPaiement,
notes: newNotes
};
} else {
depensesData.push({
id: row.dataset.id || `dep-${Date.now()}`,
date: formattedNewDate,
categorie: newCategorie,
description: newDescription,
montant: newMontant,
paiement: newPaiement,
notes: newNotes
});
}
localStorage.setItem('depensesData', JSON.stringify(depensesData));
// Mettre à jour les données du bouton de visualisation si disponible
const viewButton = row.querySelector('.view-amende-btn');
if (viewButton) {
viewButton.dataset.date = formattedNewDate;
viewButton.dataset.montant = newMontant;
viewButton.dataset.notes = newNotes;
}
} else {
// Restaurer l'apparence du bouton en cas d'échec
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Afficher une notification d'erreur
showNotification('Erreur lors de l\'enregistrement: Problème de connexion au serveur. Veuillez réessayer.', 'error');
}
}, 1200);
}
});
});
});
}
// PPA Modal Functions
function openCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.remove('hidden');
document.body.style.overflow = 'hidden';
}
function closeCreatePPAModal() {
const modal = document.getElementById('createPPAModal');
modal.classList.add('hidden');
document.body.style.overflow = '';
}
// View PPA Modal Functions
function initViewPPAButtons() {
const viewButtons = document.querySelectorAll('.view-ppa-btn');
viewButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Récupérer la ligne du tableau correspondante
const row = this.closest('tr');
// Récupérer les informations du PPA
const date = row.cells[0]?.textContent || '';
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const type = row.cells[3]?.textContent || '';
const heure = row.cells[4]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const testPsy = row.cells[6]?.querySelector('span')?.textContent || '';
const testPsyClass = row.cells[6]?.querySelector('span')?.className || '';
const munitions = row.cells[7]?.textContent || '';
const statut = row.cells[8]?.querySelector('span')?.textContent || '';
const statutClass = row.cells[8]?.querySelector('span')?.className || '';
// Créer le modal de visualisation
const viewPPAModal = document.createElement('div');
viewPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
viewPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto animate-fade-in">
<div class="p-6 border-b flex justify-between items-center">
<h3 class="text-xl font-semibold">Détails du PPA <span class="text-primary">${reference}</span></h3>
<button id="closeViewPPABtn" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700" onclick="document.body.removeChild(viewPPAModal); document.body.style.overflow = '';">
<i class="ri-close-line ri-lg"></i>
</button>
</div>
<div class="p-6">
<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
<!-- Informations principales -->
<div class="lg:col-span-2">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Informations principales</h4>
<div class="grid grid-cols-2 gap-4">
<div>
<p class="text-sm text-gray-500 mb-1">Date d'enregistrement</p>
<p class="font-medium">${date}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Heure</p>
<p class="font-medium">${heure}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Modèle d'arme</p>
<p class="font-medium">${armeModel}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Type</p>
<p class="font-medium">${type}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Agent responsable</p>
<p class="font-medium">${agent}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Munitions autorisées</p>
<p class="font-medium">${munitions}</p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Test psychologique</p>
<p><span class="${testPsyClass}">${testPsy}</span></p>
</div>
<div>
<p class="text-sm text-gray-500 mb-1">Statut</p>
<p><span class="${statutClass}">${statut}</span></p>
</div>
</div>
</div>
<!-- Historique des modifications -->
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Historique des modifications</h4>
<div class="space-y-3">
<div class="p-3 bg-white rounded shadow-sm">
<div class="flex justify-between items-center">
<p class="text-sm font-medium">Création du dossier</p>
<p class="text-xs text-gray-500">${date}</p>
</div>
<p class="text-sm text-gray-600 mt-1">Dossier créé par ${agent}</p>
</div>
</div>
</div>
</div>
<!-- Notes et documents -->
<div class="lg:col-span-1">
<div class="bg-gray-50 p-4 rounded mb-6">
<h4 class="font-medium text-lg mb-4">Notes</h4>
<p class="text-sm">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</p>
</div>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-end">
<!-- Bouton supprimé -->
</div>
</div>
`;
document.body.appendChild(viewPPAModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons
document.getElementById('closeViewPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
const hasChanges = window.ppaDataModified || false;
if (hasChanges) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[60]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.ppaDataModified = false; // Réinitialiser l'état des modifications
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
});
} else {
// Si aucune modification n'a été apportée, fermer directement
// Ajouter une animation de fermeture en douceur
viewPPAModal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
viewPPAModal.style.opacity = '0';
viewPPAModal.style.transform = 'scale(0.95)';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(viewPPAModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
window.location.href = 'index.html'; // Rediriger vers la page principale
}, 300);
}
});
// Ajouter un gestionnaire d'événements pour la touche Échap
document.addEventListener('keydown', function(e) {
if (e.key === 'Escape' && document.contains(viewPPAModal)) {
document.getElementById('closeViewPPABtn').click();
}
});
// Ajouter des écouteurs d'événements pour détecter les modifications
const editableFields = editPPAModal.querySelectorAll('input, select, textarea');
editableFields.forEach(field => {
field.addEventListener('change', function() {
window.ppaDataModified = true;
});
field.addEventListener('input', function() {
window.ppaDataModified = true;
});
});
document.getElementById('deletePPABtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(viewPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('printPPABtn').addEventListener('click', function() {
// Simuler l'impression
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Préparation de l'impression...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
showNotification('Document envoyé à l\'imprimante', 'success');
}, 1500);
});
document.getElementById('exportPPABtn').addEventListener('click', function() {
// Créer un menu déroulant pour les options d'exportation
const exportMenu = document.createElement('div');
exportMenu.className = 'absolute bottom-16 right-6 bg-white rounded-lg shadow-xl border border-gray-200 z-50 py-2 w-48 animate-fade-in';
exportMenu.innerHTML = `
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="pdf">
<i class="ri-file-pdf-line text-red-500"></i>
Exporter en PDF
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="excel">
<i class="ri-file-excel-line text-green-500"></i>
Exporter en Excel
</button>
<button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center gap-2" data-format="word">
<i class="ri-file-word-line text-blue-500"></i>
Exporter en Word
</button>
`;
// Ajouter le menu à côté du bouton d'exportation
this.parentNode.appendChild(exportMenu);
// Gérer les clics en dehors du menu pour le fermer
const closeExportMenu = function(e) {
if (!exportMenu.contains(e.target) && e.target !== document.getElementById('exportPPABtn')) {
exportMenu.remove();
document.removeEventListener('click', closeExportMenu);
}
};
// Ajouter un délai pour éviter que le menu ne se ferme immédiatement
setTimeout(() => {
document.addEventListener('click', closeExportMenu);
}, 100);
// Gérer les clics sur les options d'exportation
exportMenu.querySelectorAll('button').forEach(button => {
button.addEventListener('click', function() {
const format = this.dataset.format;
exportMenu.remove();
// Simuler l'exportation
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
<p class="text-gray-700">Exportation en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
setTimeout(() => {
document.body.removeChild(loadingIndicator);
// Créer un élément <a> invisible pour déclencher le téléchargement
const link = document.createElement('a');
link.href = '#'; // Dans une application réelle, ce serait l'URL du fichier
if (format === 'pdf') {
link.download = `PPA_${reference}.pdf`;
showNotification('Document exporté en PDF', 'success');
} else if (format === 'excel') {
link.download = `PPA_${reference}.xlsx`;
showNotification('Document exporté en Excel', 'success');
} else if (format === 'word') {
link.download = `PPA_${reference}.docx`;
showNotification('Document exporté en Word', 'success');
}
// Simuler un clic sur le lien pour déclencher le téléchargement
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}, 1500);
});
});
});
// Initialiser les boutons de téléchargement
const downloadButtons = viewPPAModal.querySelectorAll('.download-btn');
downloadButtons.forEach(button => {
button.addEventListener('click', function(e) {
e.stopPropagation();
// Ajouter une classe pour indiquer que le téléchargement est en cours
this.classList.add('text-primary', 'animate-pulse');
// Récupérer le nom du fichier à partir de l'attribut data
const filename = this.dataset.filename;
// Gérer le téléchargement
handleFileDownload(filename);
// Retirer l'animation après un délai
setTimeout(() => {
this.classList.remove('animate-pulse');
}, 2000);
});
});
// Gérer le bouton d'édition
document.getElementById('editPPAFromViewBtn').addEventListener('click', function() {
// Indiquer que des modifications pourraient être apportées
window.ppaDataModified = true;
// Fermer le modal de visualisation
document.body.removeChild(viewPPAModal);
document.body.style.overflow = '';
// Créer un modal d'édition (similaire au modal de création mais pré-rempli)
const editPPAModal = document.createElement('div');
editPPAModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
editPPAModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold">Modifier le PPA <span class="text-primary">${reference}</span></h3>
</div>
<div class="p-6">
<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Référence</label>
<input type="text" id="editPPAReference" value="${reference}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Modèle d'arme</label>
<input type="text" id="editPPAArmeModel" value="${armeModel}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
<select id="editPPAType" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="Permis de port d'arme" ${type === 'Permis de port d\'arme' ? 'selected' : ''}>Permis de port d'arme</option>
<option value="Renouvellement" ${type === 'Renouvellement' ? 'selected' : ''}>Renouvellement</option>
<option value="Autorisation temporaire" ${type === 'Autorisation temporaire' ? 'selected' : ''}>Autorisation temporaire</option>
</select>
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Heure</label>
<input type="time" id="editPPAHeure" value="${heure}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Agent responsable</label>
<input type="text" id="editPPAAgent" value="${agent}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Nombre de munitions</label>
<input type="number" id="editPPAMunitions" value="${munitions.replace(' cartouches', '')}" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
<div>
<label class="block text-sm font-medium text-gray-700 mb-1">Test psychologique</label>
<div class="flex items-center gap-4">
<select id="editPPATestPsy" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
<option value="non_passe" ${testPsy.includes('Non passé') ? 'selected' : ''}>Non passé</option>
<option value="en_cours" ${testPsy.includes('En cours') ? 'selected' : ''}>En cours</option>
<option value="valide" ${testPsy.includes('Validé') ? 'selected' : ''}>Validé</option>
<option value="invalide" ${testPsy.includes('Invalidé') ? 'selected' : ''}>Invalidé</option>
</select>
<input type="date" id="editPPATestPsyDate" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
</div>
</div>
<div class="md:col-span-2">
<label class="block text-sm font-medium text-gray-700 mb-1">Notes complémentaires</label>
<textarea id="editPPANotes" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary" rows="3">Demande de port d'arme pour raisons professionnelles. Le demandeur a fourni tous les documents nécessaires et a passé les tests requis avec succès.</textarea>
</div>
</div>
</div>
<div class="p-6 bg-gray-50 flex justify-between">
<button id="deletePPAFromEditBtn" class="px-4 py-2 border border-red-300 text-red-600 hover:bg-red-50 rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-delete-bin-line"></i>
</div>
Supprimer
</button>
<div class="flex gap-3">
<button id="cancelEditPPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="saveEditPPABtn" class="px-4 py-2 bg-primary text-white rounded-button text-sm whitespace-nowrap flex items-center gap-2">
<div class="w-4 h-4 flex items-center justify-center">
<i class="ri-save-line"></i>
</div>
Enregistrer
</button>
</div>
</div>
</div>
`;
document.body.appendChild(editPPAModal);
document.body.style.overflow = 'hidden';
// Gérer les événements des boutons
document.getElementById('cancelEditPPABtn').addEventListener('click', function() {
// Vérifier si des modifications ont été apportées
if (window.ppaDataModified) {
// Créer une boîte de dialogue de confirmation
const confirmDialog = document.createElement('div');
confirmDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]';
confirmDialog.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6">
<h3 class="text-lg font-semibold mb-3">Confirmation</h3>
<p class="text-gray-600">Voulez-vous vraiment fermer sans enregistrer vos modifications?</p>
</div>
<div class="p-4 bg-gray-50 flex justify-end gap-3">
<button id="cancelCloseEditBtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap">
Annuler
</button>
<button id="confirmCloseEditBtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap">
Fermer sans enregistrer
</button>
</div>
</div>
`;
document.body.appendChild(confirmDialog);
// Gérer les événements des boutons
document.getElementById('cancelCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
});
document.getElementById('confirmCloseEditBtn').addEventListener('click', function() {
document.body.removeChild(confirmDialog);
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
window.ppaDataModified = false; // Réinitialiser l'état des modifications
});
} else {
// Si aucune modification n'a été apportée, fermer directement
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
}
});
document.getElementById('deletePPAFromEditBtn').addEventListener('click', function() {
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function() {
document.body.removeChild(deleteConfirmModal);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function() {
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau
row.remove();
// Supprimer tous les modals
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(editPPAModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = '';
// Afficher une notification de succès
showNotification('PPA supprimé avec succès', 'success');
}, 1500);
});
});
document.getElementById('saveEditPPABtn').addEventListener('click', function() {
// Indiquer que des modifications sont en cours
window.ppaDataModified = true;
// Récupérer les valeurs modifiées
const newReference = document.getElementById('editPPAReference').value;
const newArmeModel = document.getElementById('editPPAArmeModel').value;
const newType = document.getElementById('editPPAType').value;
const newHeure = document.getElementById('editPPAHeure').value;
const newAgent = document.getElementById('editPPAAgent').value;
const newMunitions = document.getElementById('editPPAMunitions').value;
const newTestPsy = document.getElementById('editPPATestPsy').value;
const newTestPsyDate = document.getElementById('editPPATestPsyDate').value;
const newNotes = document.getElementById('editPPANotes').value;
// Validation
if (!newReference || !newArmeModel || !newHeure || !newAgent || !newMunitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('saveEditPPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let newTestPsyStatus = '';
let newStatusClass = '';
if (newTestPsy === 'valide') {
newTestPsyStatus = `Validé ${new Date(newTestPsyDate).toLocaleDateString('fr-FR')}`;
newStatusClass = 'px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs';
} else if (newTestPsy === 'invalide') {
newTestPsyStatus = 'Invalidé';
newStatusClass = 'px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs';
} else if (newTestPsy === 'en_cours') {
newTestPsyStatus = 'En cours';
newStatusClass = 'px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs';
} else {
newTestPsyStatus = 'Non passé';
newStatusClass = 'px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs';
}
// Simulate saving
setTimeout(() => {
// Mettre à jour la ligne dans le tableau
row.cells[1].textContent = newReference;
row.cells[2].textContent = newArmeModel;
row.cells[3].textContent = newType;
row.cells[4].textContent = newHeure;
row.cells[5].textContent = newAgent;
row.cells[6].innerHTML = `<span class="${newStatusClass}">${newTestPsyStatus}</span>`;
row.cells[7].textContent = `${newMunitions} cartouches`;
// Ajouter un effet de highlight à la ligne modifiée
row.classList.add('bg-green-50', 'transition-all');
setTimeout(() => {
row.classList.remove('bg-green-50', 'transition-all');
}, 1500);
// Fermer le modal d'édition
document.body.removeChild(editPPAModal);
document.body.style.overflow = '';
// Réinitialiser l'état des modifications après sauvegarde
window.ppaDataModified = false;
// Afficher une notification de succès
showNotification('PPA modifié avec succès', 'success');
}, 1500);
});
});
});
});
}
// Edit PPA Modal Functions
function initEditPPAButtons() {
// Initialiser les boutons de suppression de PPA
const deleteButtons = document.querySelectorAll('.delete-ppa-btn');
deleteButtons.forEach(button => {
if (!button.hasAttribute('onclick')) {
button.setAttribute('onclick', 'event.stopPropagation(); deletePPA(this)');
}
});
}
// Fonction de suppression de PPA
function deletePPA(button) {
// Récupérer la ligne du tableau correspondante
const row = button.closest('tr');
// Récupérer les informations du PPA
const reference = row.cells[1]?.textContent || '';
const armeModel = row.cells[2]?.textContent || '';
const agent = row.cells[5]?.textContent || '';
const date = row.cells[0]?.textContent || new Date().toLocaleDateString('fr-FR');
// Créer le modal de confirmation de suppression
const deleteConfirmModal = document.createElement('div');
deleteConfirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60';
deleteConfirmModal.innerHTML = `
<div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 animate-fade-in">
<div class="p-6 border-b">
<h3 class="text-xl font-semibold text-red-600">Confirmer la suppression</h3>
</div>
<div class="p-6">
<p class="mb-4">Êtes-vous sûr de vouloir supprimer définitivement ce PPA ?</p>
<div class="bg-gray-50 p-4 rounded mb-4">
<p class="font-medium">${reference}</p>
<p class="text-sm text-gray-600">Modèle d'arme: ${armeModel}</p>
<p class="text-sm text-gray-600">Agent: ${agent}</p>
<p class="text-sm text-gray-600">Date: ${date}</p>
</div>
<p class="text-sm text-red-600 font-medium">Cette action est irréversible et ne pourra pas être annulée.</p>
</div>
<div class="p-6 bg-gray-50 flex justify-end gap-3">
<button id="cancelDeletePPABtn" class="px-4 py-2 border border-gray-300 rounded-button text-sm whitespace-nowrap hover:bg-gray-100 transition-colors">
Annuler
</button>
<button id="confirmDeletePPABtn" class="px-4 py-2 bg-red-600 text-white rounded-button text-sm whitespace-nowrap hover:bg-red-700 transition-colors">
Confirmer la suppression
</button>
</div>
</div>
`;
document.body.appendChild(deleteConfirmModal);
document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
// Gérer les événements des boutons de confirmation de suppression
document.getElementById('cancelDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Ajouter une animation de fermeture en douceur
deleteConfirmModal.style.transition = 'opacity 0.3s ease';
deleteConfirmModal.style.opacity = '0';
// Attendre la fin de l'animation avant de supprimer l'élément
setTimeout(() => {
document.body.removeChild(deleteConfirmModal);
document.body.style.overflow = ''; // Rétablir le défilement de la page
}, 300);
});
document.getElementById('confirmDeletePPABtn').addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
// Changer l'apparence du bouton pour indiquer le traitement
const confirmBtn = this;
const originalContent = confirmBtn.innerHTML;
confirmBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Suppression...</span>
`;
confirmBtn.disabled = true;
// Afficher un indicateur de chargement
const loadingIndicator = document.createElement('div');
loadingIndicator.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
loadingIndicator.innerHTML = `
<div class="bg-white rounded-lg p-6 flex items-center gap-3">
<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-600"></div>
<p class="text-gray-700">Suppression en cours...</p>
</div>
`;
document.body.appendChild(loadingIndicator);
// Simuler un délai de traitement
setTimeout(() => {
// Supprimer la ligne du tableau définitivement
row.remove();
// Supprimer le modal de confirmation et l'indicateur de chargement
document.body.removeChild(deleteConfirmModal);
document.body.removeChild(loadingIndicator);
document.body.style.overflow = ''; // Rétablir le défilement de la page
// Afficher une notification de succès
showNotification('PPA supprimé définitivement', 'success');
}, 1000);
});
}
// Initialize PPA buttons on page load
document.addEventListener('DOMContentLoaded', function() {
initEditPPAButtons();
initViewPPAButtons();
// Réinitialiser les boutons PPA après l'ajout d'un nouveau PPA
document.getElementById('savePPABtn')?.addEventListener('click', function() {
setTimeout(() => {
initEditPPAButtons();
initViewPPAButtons();
}, 1000);
});
});
function savePPA() {
const reference = document.getElementById('ppaReference').value;
const armeModel = document.getElementById('ppaArmeModel').value;
const type = document.getElementById('ppaType').value;
const heure = document.getElementById('ppaHeure').value;
const agent = document.getElementById('ppaAgent').value;
const munitions = document.getElementById('ppaMunitions').value;
const testPsy = document.getElementById('ppaTestPsy').value;
const testPsyDate = document.getElementById('ppaTestPsyDate').value;
// Validation
if (!reference || !armeModel || !heure || !agent || !munitions) {
showNotification('Veuillez remplir tous les champs obligatoires', 'error');
return;
}
// Change button appearance
const saveBtn = document.getElementById('savePPABtn');
const originalContent = saveBtn.innerHTML;
saveBtn.innerHTML = `
<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
<span>Sauvegarde...</span>
`;
saveBtn.disabled = true;
saveBtn.classList.add('opacity-75');
// Format test psy status
let testPsyStatus = '';
let statusClass = '';
if (testPsy === 'valide') {
testPsyStatus = `Validé ${new Date(testPsyDate).toLocaleDateString('fr-FR')}`;
statusClass = 'bg-green-100 text-green-800';
} else if (testPsy === 'invalide') {
testPsyStatus = 'Invalidé';
statusClass = 'bg-red-100 text-red-800';
} else if (testPsy === 'en_cours') {
testPsyStatus = 'En cours';
statusClass = 'bg-yellow-100 text-yellow-800';
} else {
testPsyStatus = 'Non passé';
statusClass = 'bg-gray-100 text-gray-800';
}
// Simulate saving
setTimeout(() => {
const ppaTable = document.querySelector('#ppa table tbody');
const newRow = document.createElement('tr');
newRow.className = 'border-b';
newRow.innerHTML = `
<td class="px-4 py-3 text-sm">${new Date().toLocaleDateString('fr-FR')}</td>
<td class="px-4 py-3 text-sm">${reference}</td>
<td class="px-4 py-3 text-sm">${armeModel}</td>
<td class="px-4 py-3 text-sm">${type}</td>
<td class="px-4 py-3 text-sm">${heure}</td>
<td class="px-4 py-3 text-sm">${agent}</td>
<td class="px-4 py-3 text-sm">
<span class="px-2 py-1 ${statusClass} rounded-full text-xs">${testPsyStatus}</span>
</td>
<td class="px-4 py-3 text-sm">${munitions} cartouches</td>
<td class="px-4 py-3 text-sm">
<div class="flex gap-2">
<button class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-red-500 delete-ppa-btn">
<i class="ri-delete-bin-line"></i>
</button>
</div>
</td>
`;
// Add with highlight effect
newRow.classList.add('bg-green-50');
ppaTable.insertBefore(newRow, ppaTable.firstChild);
// Reset form
document.getElementById('ppaReference').value = '';
document.getElementById('ppaArmeModel').value = '';
document.getElementById('ppaType').selectedIndex = 0;
document.getElementById('ppaHeure').value = '';
document.getElementById('ppaAgent').value = '';
document.getElementById('ppaMunitions').value = '';
document.getElementById('ppaTestPsy').selectedIndex = 0;
document.getElementById('ppaTestPsyDate').value = '';
document.getElementById('ppaNotes').value = '';
// Close modal
closeCreatePPAModal();
// Show success notification
showNotification('PPA créé avec succès', 'success');
// Remove highlight effect
setTimeout(() => {
newRow.classList.remove('bg-green-50');
}, 1000);
// Restore button state
saveBtn.innerHTML = originalContent;
saveBtn.disabled = false;
saveBtn.classList.remove('opacity-75');
// Réinitialiser les boutons de suppression pour le nouveau PPA
setTimeout(() => {
initEditPPAButtons();
}, 100);
}, 800);
}
</script>
</body>
</html>